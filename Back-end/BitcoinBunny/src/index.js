import { Actor, HttpAgent } from '@dfinity/agent';
import { AuthClient } from "@dfinity/auth-client";
import { sha224 } from '@dfinity/principal/lib/esm/utils/sha224';
import { getCrc32 } from '@dfinity/principal/lib/esm/utils/getCrc';
import { Principal } from "@dfinity/agent"; 
import {MyPrincipal} from '@dfinity/principal';
import { mooncatparser }  from "./bunny/bunnyparser.js";
import { bunnycolors }  from "./bunny/bunnycolors.js";

/********************************* */
import { idlFactory as icp_bunny_idl, canisterId as icp_bunny_id } from 'dfx-generated/prod_icpbunny';


// Canister Id as an example
const bunnyCanisterId = 'xkbqi-2qaaa-aaaah-qbpqq-cai';
//const bunnyCanisterId = 'ezu5f-pqaaa-aaaaf-qaeba-cai';

const punkCanisterId  = 'qcg3w-tyaaa-aaaah-qakea-cai';
const bunnyImageCanId = 'emtmi-oyaaa-aaaaf-qaecq-cai';
const financeCanisterID = 'hhf2l-iaaaa-aaaaf-qaeia-cai';

const storage = [];

storage[0] = 'efqhu-yqaaa-aaaaf-qaeda-cai';
storage[1] = 'ecrba-viaaa-aaaaf-qaedq-cai';
storage[2] = 'fp7fo-2aaaa-aaaaf-qaeea-cai';
storage[3] = 'fi6d2-xyaaa-aaaaf-qaeeq-cai';
storage[4] = 'fb5ig-bqaaa-aaaaf-qaefa-cai';

storage[5] = 'fg4os-miaaa-aaaaf-qaefq-cai';
storage[6] = 'ft377-naaaa-aaaaf-qaega-cai';
storage[7] = 'fu2zl-ayaaa-aaaaf-qaegq-cai';
storage[8] = 'f5zsx-wqaaa-aaaaf-qaeha-cai';
storage[9] = 'f2yud-3iaaa-aaaaf-qaehq-cai';
storage[10]= 'emtmi-oyaaa-aaaaf-qaecq-cai';  //Used in Stage0 Testing


const Breed = [];
Breed[0] = 'Pointed Beveren';   
Breed[1] = 'American Chinchilla';   
Breed[2] = 'Blanc de Hotot';    
Breed[3] = 'Holland Lop'; 
Breed[4] = 'Swiss Fox';
Breed[5] = 'American Sable';
Breed[6] = 'Riverine';
Breed[7] = 'Silver Fox';
Breed[8] = 'American Blue';
Breed[9] = 'Harlequin'; 
  

const EarningCapacity = [];
EarningCapacity[0] = "2";
EarningCapacity[1] = "3";   
EarningCapacity[2] = "4";    
EarningCapacity[3] = "5"; 
EarningCapacity[4] = "6";
EarningCapacity[5] = "7";
EarningCapacity[6] = "8";
EarningCapacity[7] = "9";
EarningCapacity[8] = "10";
EarningCapacity[9] = "12";


const LifeSpan = [];
LifeSpan[0] = "66";
LifeSpan[1] = "60";   
LifeSpan[2] = "57";    
LifeSpan[3] = "54"; 
LifeSpan[4] = "51";
LifeSpan[5] = "48";
LifeSpan[6] = "42";
LifeSpan[7] = "39";
LifeSpan[8] = "36";
LifeSpan[9] = "18";


const BreedingCapacity = [];
BreedingCapacity[0] = "10";
BreedingCapacity[1] = "8";   
BreedingCapacity[2] = "7";    
BreedingCapacity[3] = "6"; 
BreedingCapacity[4] = "5";
BreedingCapacity[5] = "4";
BreedingCapacity[6] = "3";
BreedingCapacity[7] = "3";
BreedingCapacity[8] = "3";
BreedingCapacity[9] = "3";


var rareIndex = 0;
var trait =  {
  "Breed": Breed[rareIndex], 
  "EarningCapacity": EarningCapacity[rareIndex], 
  "LifeSpan": LifeSpan[rareIndex], 
  "BreedingCapacity": BreedingCapacity[rareIndex],
  "Gender": true, 
  "Fertility": true, 
  "ThreeD_Breedable": false
  };

/***********************************************/

const connectionState = false;
//var emptyTokens = [6482,6479,6478,6430,6427,6424,6417,6413,6383,6378,6377,6371,6366,6363,6360,6355,6351,6348,6344,6337,6332,6324,6319,6329,6326,6316,6311,6305,6297,6292,6286];
//var emptyTokens = [6854,2617,6855,2622,6858,2634,6860,2639,6864,2642,6865,2645,6872,2650,6881,2663,6036,6884,2668,6040,6887,2674,6043,6889,2677,6046];

var isSingleImage = false;

//[6491,6493,6502,6504,6507,6510,6514,6518,6521,6527,6533,6536,6540,6544,6548,6551,6555,6559,6563,6568,6573,6580,6587,6499];
//3499,3500,3501,3503,3504,3505,3506,3508,3509,3511,3512,3514,3515,3516,3518,3519,3520,3521,3523,3524,3525,3526,3527,3529,3531,3532,3535,3536,3537,3538,3539,3541,3542,3543,3545,3546,3548,3549,3551,3552,3554,3556,3558,3559,3561,3562,3563,3565,3566,3567,3569,3572,3573,3576,3577,3579,3580,3581,3584,3585,3706,3874,3891,3931,3943,3960,3969,3984,3988,3990,3995,3998,4005,4016,4019,4022,4023,4025,4026,4027,4030,4031,4035,4036,4039,4041,4043,4044,4046,4047,4048,4049,4050,4051,4052,4054,4055,4060,4062,4063,4064,4065,4069,4070,4072,4075,4076,4078,4079,4080,4082,4084,4085,4086,4088,4090,4091,4096,4097,4098,4100,4101,4102,4105,4106,4108,4109,4110,4111,4113,4114,4117,4118,4119,4120,4121,4123,4124,4125,4126,4128,4131,4133,4134,4137,4141,4143,4144,4146,4149,4151,4153,4154,4155,4156,4158,4159,4160,4162,4166,4173,4178,4179,4181,4183,4184,4186,4187,4189,4190,4191,4192,4195,4196,4197,4199,4201,4203,4204,4207,4208,4209,4210,4211,4213,4215,4217,4218,4219,4220,4223,4224,4225,4226,4227,4228,4229,4230,4231,4232,4233,4234,4235,4236,4238,4240,4244,4246,4249,4251,4253,4254,4255,4256,4258,4261,4262,4265,4266,4267,4270,4271,4272,4273,4274,4278,4281,4282,4285,4288,4290,4292,4295,4297,4301,4302,4305,4306,4310,4312,4316,4320,4323,4324,4325,4330,4331,4332,4334,4338
//4339,4340,4341,4342,4345,4351,4355,4356,4357,4358,4359,4361,4362,4364,4365,4366,4367,4371,4373,4374,4376,4377,4380,4382,4385,4389,4390,4394,4395,4399,4401,4402,4403,4405,4406,4408,4409,4411,4415,4416,4422,4423,4425,4427,4428,4429,4431,4432,4435,4436,4437,4439,4440,4443,4445,4446,4447,4448,4450,4452,4453,4458,4459,4462,4463,4464,4465,4466,4467,4469,4471,4472,4474,4477,4478,4481,4483,4485,4486,4488,4490,4492,4493,4496,4497,4498,4499,4501,4503,4504,4506,4507,4508,4511,4512,4513,4515,4516,4517,4518,4519,4522,4524,4525,4528,4530,4531,4533,4534,4536,4537,4538,4539,4540,4541,4543,4544,4545,4546,4547,4549,4553,4554,4555,4557,4558,4559,4561,4562,4563,4564,4565,4568,4571,4572,4573,4576,4578,4579,4580,4581,4582,4583,4584,4585,4586,4587,4588,4589,4590,4591,4592,4595,4601,4603,4606,4610,4611,4612,4613,4614,4615,4617,4618,4619,4620,4622,4625,4627,4628,4630,4631,4632,4633,4634,4635,4638,4639,4640,4643,4644,4646,4647,4649,4650,4653,4654,4655,4656,4657,4659,4660,4661,4665,4666,4668,4669,4670,4672,4673,4675,4678,4679,4680,4681,4684,4686,4688,4689,4690,4692,4693,4694,4695,4696,4697,4698,4700,4701,4702,4705];
//4707,4708,4709,4710,4713,4714,4716,4718,4722,4723,4726,4728,4730,4731,4732,4734,4736,4737,4740,4741,4743,4744,4746,4747,4748,4749,4751,4753,4754,4755,4756,4757,4758,4761,4764,4765,4766,4767,4768,4769,4770,4771,4772,4773,4774,4776,4777,4778,4780,4781,4783,4784,4786,4787,4788,4789,4790,4792,4794,4795,4796,4797,4798,4800,4801,4802,4803,4804,4805,4807,4808,4809,4810,4811,4812,4813,4814,4815,4816,4817,4818,4820,4821,4822,4823,4825,4826,4828,4829,4830,4832,4833,4834,4835,4836,4837,4838,4839,4840,4841,4842,4843,4844,4845,4846,4847,4848,4849,4852,4853,4854,4855,4856,4858,4859,4860,4861,4863,4864,4865,4866,4867,4868,4869,4871,4872,4874,4875,4876,4878,4879,4880,4881,4882,4883,4884,4885,4886,4887,4888,4889,4890];
//,4891,4892,4893,4894,4895,4896,4897,4898,4900,4901,4902,4903,4906,4908,4910,4911,4913,4915,4917,4918,4919,4921,4922,4924,4925,4926,4927,4928,4930,4932,4933,4934,4936,4938,4939,4940,4941,4942,4943,4944,4946,4947,4948,4949,4950,4951,4952,4953,4954,4955,4956,4957,4959,4960,4962,4963,4965,4966,4968,4969,4971,4972,4973,4975,4976,4977,4978,4979,4980,4982,4983,4984,4985,4986,4987,4988,4990,4991,4992,4994,4995,4996,4997,4999];
//[3001,3002,3005,3007,3009,3010,3014,3015,3017,3018,3020,3021,3022,3024,3026,3027,3037,3038,3041,3046,3047,3050,3051,3054,3055,3056,3058,3061,3063,3065,3066,3074,3076,3077,3079,3080,3085,3086,3088,3089,3090,3091,3093,3096,3099,3100,3102,3104,3105,3106,3108,3111,3112,3114,3115,3118,3120,3121,3123,3124,3125,3126,3127,3128,3129,3130,3132,3138,3139,3140,3141,3142,3143,3145,3146,3147,3148,3152,3154,3155,3156,3157,3158,3159,3160,3163,3164,3166,3167,3168,3169,3170,3171,3172,3173,3176,3177,3178,3179,3181,3184,3185,3186,3188,3189,3190,3191,3192,3193,3194,3196,3198,3200,3201,3203,3204,3206,3207,3208,3209,3210,3211,3212,3214,3215,3216,3217,3218,3220,3221,3222,3224,3225,3226,3227,3228,3230,3231,3232,3233,3234,3235,3236,3237,3238,3239,3241,3243,3245,3246,3247,3249,3251,3252,3253,3254,3255,3256,3258,3264,3266,3268,3269,3272,3273,3274,3275,3276,3277,3278,3282,3283,3284,3285,3287,3288,3289,3290,3291,3294,3295,3296,3299,3300,3301,3303,3304,3306,3308,3310,3311,3312,3313,3314,3315,3317,3318,3320,3321,3322,3324,3325,3326,3328,3329,3332,3333,3334,3335,3336,3337,3338,3340,3341,3343,3344,3348,3350,3351,3352,3353,3355,3356,3357,3358,3359,3360,3361,3362,3363,3364,3365,3366,3367,3369,3371,3372,3373,3374,3375,3376,3381,3382,3383,3384,3385,3386,3389,3390,3391,3392,3393,3395,3397,3399,3401,3402,3403,3404,3405,3406,3407,3408,3410,3411,3413,3414,3415,3416,3417,3418,3419,3420,3421,3422,3423,3424,3425,3426,3428,3430,3431,3432,3433,3434,3435,3436,3437,3438,3439,3440,3441,3442,3444,3445,3446,3448,3449,3450,3451,3452,3453,3455,3456,3457,3459,3461,3462,3463,3464,3465,3466,3467,3468,3469,3470,3471,3474,3475,3476,3477,3479,3480,3481,3482,3483,3484,3485,3487,3488,3489,3490,3491,3492,3493,3495,3496];
//[5744,5745,5747,5748,5749,5750,5752,5753,5754,5755,5756,5757,5758,5759,5760,5761,5762,5763,5764,5767,5768,5771,5772,5773,5776,5777,5779,5782,5783,5784,5785,5787,5788,5789,5790,5791,5793,5794,5795,5796,5797,5798,5799,5800,5804,5806,5807,5808,5809,5810,5813,5814,5815,5816,5817,5818,5819,5820,5821,5822,5823,5824,5825,5827,5828,5829,5831,5832,5833,5835,5836,5837,5839,5840,5841,5842,5843,5844,5846,5848,5849,5850,5851,5853,5856,5857,5858,5860,5861,5864,5865,5867,5869,5870,5871,5872,5874,5875,5876,5877,5879,5881,5882,5883,5884,5887,5890,5891,5892,5894,5895,5896,5898,5899,5900,5902,5904,5906,5907,5908,5909,5911,5913];
//5914,5915,5916,5917,5919,5921,5922,5923,5926,5927,5928,5929,5930,5931,5933,5937,5938,5939,5943,5945,5947,5948,5949,5951,5953,5954,5955,5958,5959,5960,5961,5962,5965,5967,5968,5971,5972,5974,5975,5976,5978,5980,5981,5982,5984,5985,5986,5989,5990,5991,5993,5995,5996,5997,6001,6004,6005,6006,6008,6009,6011,6012,6013,6016,6018,6019];
//5744,5745,5747,5748,5749,5750,5752,5753,5754,5755,5756,5757,5758,5759,5760,5761,5762,5763,5764,5767,5768,5771,5772,5773,5776,5777,5779,5782,5783,5784,5785,5787,5788,5789,5790,5791,5793,5794,5795,5796,5797,5798,5799,5800,5804,5806,5807,5808,5809,5810,5813,5814,5815,5816,5817,5818,5819,5820,5821,5822,5823,5824,5825,5827,5828,5829,5831,5832,5833,5835,5836,5837,5839,5840,5841,5842,5843,5844,5846,5848,5849,5850,5851,5853,5856,5857,5858,5860,5861,5864,5865,5867,5869,5870,5871,5872,5874,5875,5876,5877,5879,5881,5882,5883,5884,5887,5890,5891,5892,5894,5895,5896,5898,5899,5900,5902,5904,5906,5907,5908,5909,5911,5913,5914,5915,5916,5917,5919,5921,5922,5923,5926,5927,5928,5929,5930,5931,5933,5937,5938,5939,5943,5945,5947,5948,5949,5951,5953,5954,5955,5958,5959,5960,5961,5962,5965,5967,5968,5971,5972,5974,5975,5976,5978,5980,5981,5982,5984,5985,5986,5989,5990,5991,5993,5995,5996,5997,6001,6004,6005,6006,6008,6009,6011,6012,6013,6016,6018,6019];
//8000,8004,8008,8011,8014,8015,8018,8019,8020,8022,8023,8025,8027,8028,8029,8030,8031,8034,8035,8041,8043,8044,8045,8046,8049,8053,8056,8057,8060,8063,8067,8069,8070,8072,8073,8076,8079,8080,8082,8089,8090,8091,8093,8097,8099,8102,8103,8105,8113,8115,8116,8118,8119,8120,8121,8122,8124,8126,8128,8130,8132,8134,8139,8156,8157,8158,8162,8164,8168,8169,8174,8178,8180,8184,8192,8195,8198,8199,8201,8202,8204,8210,8216,8217,8218,8219,8224,8225,8226,8227,8229,8233,8234,8240,8242,8244,8245,8247,8251,8253,8254,8255,8261,8263,8265,8267,8268,8269,8270,8276
//var emptyTokens = [5000,5001,5002,5003,5004,5005,5006,5007,5008,5010,5011,5012,5013,5014,5016,5017,5018,5019,5020,5021,5022,5023,5024,5025,5026,5027,5028,5029,5030,5031,5032,5033,5034,5035,5036,5037,5038,5039,5040,5042,5043,5044,5045,5047,5048,5049,5050,5051,5052,5053,5054,5055,5056,5057,5058,5059,5061,5064,5065,5066,5067,5068,5069,5070,5072,5073,5074,5075,5076,5077,5079,5080,5081,5082,5083,5084,5085,5086,5087,5088,5089,5090,5091,5092,5093,5094,5097,5099,5100,5101,5102,5104,5106,5107,5108,5109,5110,5111,5112,5113,5114,5116,5117,5118,5119,5120,5121,5123,5124,5125,5126,5127,5128,5129,5131,5132,5133,5134,5135,5136,5137,5139,5140,5141,5142,5143,5144,5145,5146,5147,5148,5150,5152,5153,5154,5155,5156,5158,5159,5160,5161,5162,5164,5166,5167,5168,5169,5170,5171,5172,5173,5174,5175,5176,5178,5179,5180,5181,5183,5184,5186,5187,5188,5189,5190,5192,5194,5196,5198,5200,5201,5202,5203,5204,5206,5207,5208,5209,5210,5211,5214,5216,5217,5218,5219,5220,5221,5223,5224,5225,5226,5227,5230,5231,5232,5234,5236,5237,5238,5239,5240,5241,5243,5244,5245,5246,5247,5248,5249,5250,5251,5253,5254,5255,5256,5257,5258,5259,5261,5263,5265,5267,5269,5270,5272,5273,5275,5276,5277,5278,5279,5280,5282,5284,5285,5287,5288,5289,5290,5291,5292,5293,5294,5295,5297,5298,5301,5302,5304,5305,5306,5307,5309,5310,5312,5314,5315,5317,5318,5320,5321,5324,5328,5330,5331,5334,5336,5338,5340,5343,5344,5345,5346,5347,5349,5352,5353,5356,5357,5360,5362,5363,5367,5370,5371,5372,5374,5377,5378,5379,5380,5381,5382,5383,5384,5386,5387,5390,5391,5394,5395,5397,5398,5399,5400,5401,5403,5404,5405,5407,5409,5411,5412,5413,5414,5415,5417,5420,5421,5422,5424,5425,5426,
//5428,5430,5432,5433,5434,5435,5436,5437,5438,5439,5440,5441,5444,5445,5446,5448,5449,5450,5452,5453,5454,5455,5458,5459,5460,5461,5462,5463,5465,5466,5467,5470,5471,5474,5476,5477,5478,5480,5481,5482,5483,5484,5485,5486,5488,5489,5490,5491,5493,5494,5495,5496,5497,5499,5500,5501,5502,5503,5504,5505,5506,5507,5508,5509,5511,5512,5513,5514,5515,5516,5517,5518,5519,5522,5523,5525,5526,5528,5529,5530,5531,5532,5535,5536,5537,5541,5542,5543,5545,5546,5548,5549,5550,5553,5554,5555,5556,5557,5558,5561,5562,5563,5564,5565,5566,5567,5568,5570,5572,5573,5574,5575,5576,5577,5579,5581,5582,5584,5585,5586,5587,5588,5591,5592,5594,5595,5597,5598,5599,5601,5602,5604,5605,5606,5607,5608,5610,5611,5612,5613,5614,5615,5616,5617,5619,5620,5621,5623,5624,5625,5626,5627,5628,5629,5630,5631,5632,5633,5634,5636,5637,5638,5639,5640,5641,5642,5643,5644,5647,5649,5651,5652,5653,5654,5655,5657,5658,5659,5661,5662,5663,5664,5665,5666,5667,5669,5670,5671,5672,5673,5674,5675,5676,5678,5679,5680,5681,5682,5683,5684,5686,5687,5688,5689,5690,5692,5694,5696,5698,5699,5701,5702,5703,5704,5705,5706,5707,5708,5709,5710,5712,5713,5714,5715,5716,5717,5718,5719,5720,5721,5723,5724,5725,5726,5727,5728,5729,5730,5731,5733,5734,5736,5739,5740,5741,5743];

// LAND 1
//var emptyTokens = [10219,10220,10221,10222,10223,10224,10225,10226,10227,10228,10229,10230,10231,10232,10233,10234,10235,10236,10237,10238,10239,10240,10241,10242,10243,10244,10245,10246,10247,10248,10249,10250,10251,10252,10253,10254,10255,10256,10257,10258,10259,10260,10261,10262,10263,10264,10265,10266,10267,10268,10269,10270,10271,10272,10273,10274,10275,10276,10277,10278,10279,10280,10281,10282,10283,10284,10285,10286,10287,10288,10289,10290,10291,10292,10293,10294,10295,10296,10297,10298,10299,10300,10301,10302,10303,10304,10305,10306,10307,10308,10309,10310,10311,10312,10313,10314,10315,10316,10317,10318,10319,10320,10321,10322,10323,10324,10325,10326,10327,10328,10329,10330,10331,10332,10333,10334,10335,10336,10337,10338,10339,10340,10341,10342,10343,10344,10345,10346,10347,10348,10349,10350,10351,10352,10353,10354];
//var co_ordinates = ["(41,75)","(17,90)","(-17,101)","(-52,82)","(41,76)","(17,91)","(-17,100)","(-52,81)","(41,77)","(17,92)","(-17,99)","(-52,80)","(41,78)","(17,93)","(-17,98)","(-52,79)","(41,79)","(17,94)","(-17,97)","(-52,78)","(41,80)","(17,95)","(-17,96)","(-52,77)","(41,81)","(17,96)","(-17,95)","(-52,76)","(41,82)","(17,97)","(-17,94)","(-52,75)","(41,83)","(17,98)","(-17,93)","(-52,74)","(41,84)","(17,99)","(-17,92)","(-52,73)","(41,85)","(17,100)","(-17,91)","(-52,72)","(41,86)","(17,101)","(-17,90)","(-52,71)","(41,87)","(17,102)","(-17,89)","(-52,70)","(41,88)","(17,103)","(-17,88)","(-52,69)","(41,89)","(17,104)","(-17,87)","(-52,68)","(41,90)","(17,105)","(-17,86)","(-52,67)","(41,91)","(17,106)","(-17,85)","(-52,66)","(41,92)","(17,107)","(-17,84)","(-52,65)","(41,93)","(17,108)","(-17,83)","(-52,64)","(41,94)","(17,109)","(-17,82)","(-52,63)","(40,67)","(17,110)","(-17,81)","(-52,62)","(40,68)","(16,110)","(-18,80)","(-52,61)","(40,69)","(16,109)","(-18,81)","(-52,60)","(40,70)","(16,108)","(-18,82)","(-52,59)","(40,71)","(16,107)","(-18,83)","(-52,58)","(40,72)","(16,106)","(-18,84)","(-52,57)","(40,73)","(16,105)","(-18,85)","(-53,33)","(40,74)","(16,104)","(-18,86)","(-53,34)","(40,75)","(16,103)","(-18,87)","(-53,35)","(40,76)","(16,102)","(-18,88)","(-53,36)","(40,77)","(16,101)","(-18,89)","(-53,37)","(40,78)","(16,100)","(-18,90)","(-53,38)","(40,79)","(16,99)","(-18,91)","(-53,39)","(40,80)","(16,98)","(-18,92)","(-53,40)"];

// LAND 2
// var co_ordinates = ["(40,81)","(16,97)","(-18,93)","(-53,41)","(40,82)","(16,96)","(-18,94)","(-53,42)","(40,83)","(16,95)","(-18,95)","(-53,43)","(40,84)","(16,94)","(-18,96)","(-53,44)","(40,85)","(16,93)","(-18,97)","(-53,45)","(40,86)","(16,92)","(-18,98)","(-53,46)","(40,87)","(16,91)","(-18,99)","(-53,47)","(40,88)","(16,90)","(-18,100)","(-53,48)","(40,89)","(16,89)","(-18,101)","(-53,49)","(40,90)","(16,88)","(-18,102)","(-53,50)","(40,91)","(16,87)","(-18,103)","(-53,51)","(40,92)","(16,86)","(-18,104)","(-53,52)","(40,93)","(16,85)","(-19,103)","(-53,53)","(40,94)","(16,84)","(-19,102)","(-53,54)","(40,95)","(16,83)","(-19,101)","(-53,55)","(40,96)","(16,82)","(-19,100)","(-53,56)","(40,97)","(16,81)","(-19,99)","(-53,57)","(40,98)","(16,80)","(-19,98)","(-53,58)","(39,65)","(16,79)","(-19,97)","(-53,59)","(39,66)","(16,78)","(-19,96)","(-53,60)","(39,67)","(16,77)","(-19,95)","(-53,61)","(39,68)","(16,76)","(-19,94)","(-53,62)","(39,69)","(16,75)","(-19,93)","(-53,63)","(39,70)","(16,74)","(-19,92)","(-53,64)","(39,71)","(16,73)","(-19,91)","(-53,65)","(39,72)","(15,73)","(-19,90)","(-53,66)","(39,73)","(15,74)","(-19,89)","(-53,67)","(39,74)","(15,75)","(-19,88)","(-53,68)","(39,75)","(15,76)","(-19,87)","(-53,69)","(39,76)","(15,77)","(-19,86)","(-53,70)","(39,77)","(15,78)","(-19,85)","(-53,71)","(39,78)","(15,79)","(-19,84)","(-53,72)","(39,79)","(15,80)","(-19,83)","(-53,73)","(39,80)","(15,81)","(-19,82)","(-53,74)","(39,81)","(15,82)","(-19,81)","(-53,75)","(39,82)","(15,83)","(-19,80)","(-53,76)","(39,83)","(15,84)","(-19,79)","(-53,77)","(39,84)","(15,85)","(-20,78)","(-53,78)","(39,85)","(15,86)","(-20,79)","(-53,79)","(39,86)","(15,87)","(-20,80)","(-53,80)","(39,87)","(15,88)","(-20,81)","(-53,81)","(39,88)","(15,89)","(-20,82)",
//                    "(-53,82)","(39,89)","(15,90)","(-20,83)","(-53,83)","(39,90)","(15,91)","(-20,84)","(-53,84)","(39,91)","(15,92)","(-20,85)","(-53,85)","(39,92)","(15,93)","(-20,86)","(-53,86)","(39,93)","(15,94)","(-20,87)","(-53,87)","(39,94)","(15,95)","(-20,88)","(-53,88)","(39,95)","(15,96)","(-20,89)","(-53,89)","(39,96)","(15,97)","(-20,90)","(-53,90)","(39,97)","(15,98)","(-20,91)","(-53,91)","(39,98)","(15,99)","(-20,92)","(-53,92)","(39,99)","(15,100)","(-20,93)","(-53,93)","(39,100)","(15,101)","(-20,94)","(-53,94)","(38,64)","(15,102)","(-20,95)","(-53,95)","(38,65)","(15,103)","(-20,96)","(-53,96)","(38,66)","(15,104)","(-20,97)","(-53,97)","(38,67)","(15,105)","(-20,98)","(-54,96)","(38,68)","(15,106)","(-20,99)","(-54,95)","(38,69)","(15,107)","(-20,100)","(-54,94)"];
// var emptyTokens =[10355,10356,10357,10358,10359,10360,10361,10362,10363,10364,10365,10366,10367,10368,10369,10370,10371,10372,10373,10374,10375,10376,10377,10378,10379,10380,10381,10382,10383,10384,10385,10386,10387,10388,10389,10390,10391,10392,10393,10394,10395,10396,10397,10398,10399,10400,10401,10402,10403,10404,10405,10406,10407,10408,10409,10410,10411,10412,10413,10414,10415,10416,10417,10418,10419,10420,10421,10422,10423,10424,10425,10426,10427,10428,10429,10430,10431,10432,10433,10434,10435,10436,10437,10438,10439,10440,10441,10442,10443,10444,10445,10446,10447,10448,10449,10450,10451,10452,10453,10454,10455,10456,10457,10458,10459,10460,10461,10462,10463,10464,10465,10466,10467,10468,10469,10470,10471,10472,10473,10474,10475,10476,10477,10478,10479,10480,10481,10482,10483,10484,10485,10486,10487,10488,10489,10490,10491,10492,10493,10494,10495,10496,10497,10498,10499,10500,10501,10502,10503,10504,10505,10506,10507,10508,10509,10510,10511,10512,10513,10514,10515,10516,10517,10518,10519,10520,10521,10522,10523,10524,10525,10526,10527,10528,10529,10530,10531,10532,10533,10534,10535,10536,10537,10538,10539,10540,10541,10542,10543,10544,10545,10546,10547,10548,10549,10550,10551,10552,10553,10554,10555,10556,10557,10558,10559,10560,10561,10562,10563,10564,10565,10566,10567,10568,10569,10570,10571,10572,10573,10574,10575,10576,10577,10578,10579,10580,10581,10582,10583,10584,10585,10586,10587,10588,10589,10590,10591,10592,10593,10594];


//land 3
//var co_ordinates  = ["(38,70)","(15,108)","(-54,93)","(38,71)","(15,109)","(-54,92)","(38,72)","(15,110)","(-54,91)","(38,73)","(14,110)","(-54,90)","(38,74)","(14,109)","(-54,89)","(38,75)","(14,108)","(-54,88)","(38,76)","(14,107)","(-54,87)","(38,77)","(14,106)","(-54,86)","(38,78)","(14,105)","(-54,85)","(38,79)","(14,104)","(-54,84)","(38,80)","(14,103)","(-54,83)","(38,81)","(14,102)","(-54,82)","(38,82)","(14,101)","(-54,81)","(38,83)","(14,100)","(-54,80)","(38,84)","(14,99)","(-54,79)","(38,85)","(14,98)","(-54,78)","(38,86)","(14,97)","(-54,77)","(38,87)","(14,96)","(-54,76)","(38,88)","(14,95)","(-54,75)","(38,89)","(14,94)","(-54,74)","(38,90)","(14,93)","(-54,73)","(38,91)","(14,92)","(-54,72)","(38,92)","(14,91)","(-54,71)","(38,93)","(14,90)","(-54,70)","(38,94)","(14,89)","(-54,69)","(38,95)","(14,88)","(-54,68)","(38,96)","(14,87)","(-54,67)","(38,97)","(14,86)","(-54,66)","(38,98)","(14,85)","(-54,65)","(38,99)","(14,84)","(-54,64)","(38,100)","(14,83)","(-54,63)","(38,101)","(14,82)","(-54,62)","(37,102)","(14,81)","(-54,61)","(37,101)","(14,80)","(-54,60)","(37,100)","(14,79)","(-54,59)","(37,99)","(14,78)","(-54,58)","(37,98)","(14,77)","(-54,57)","(37,97)","(14,76)","(-54,56)","(37,96)","(14,75)","(-54,55)","(37,95)","(14,74)","(-54,54)","(37,94)","(14,73)","(-54,53)","(37,93)","(14,72)","(-54,52)","(37,92)","(13,72)","(-54,51)","(37,91)","(13,73)","(-54,50)","(37,90)","(13,74)","(-54,49)","(37,89)","(13,75)","(-54,48)","(37,88)","(13,76)","(-54,47)","(37,87)","(13,77)","(-54,46)","(37,86)","(13,78)","(-54,45)","(37,85)","(13,79)","(-54,44)"];
//var emptyTokens   = [10595,10596,10598,10599,10600,10602,10603,10604,10606,10607,10608,10610,10611,10612,10614,10615,10616,10618,10619,10620,10622,10623,10624,10626,10627,10628,10630,10631,10632,10634,10635,10636,10638,10639,10640,10642,10643,10644,10646,10647,10648,10650,10651,10652,10654,10655,10656,10658,10659,10660,10662,10663,10664,10666,10667,10668,10670,10671,10672,10674,10675,10676,10678,10679,10680,10682,10683,10684,10686,10687,10688,10690,10691,10692,10694,10695,10696,10698,10699,10700,10702,10703,10704,10706,10707,10708,10710,10711,10712,10714,10715,10716,10718,10719,10720,10722,10723,10724,10726,10727,10728,10730,10731,10732,10734,10735,10736,10738,10739,10740,10742,10743,10744,10746,10747,10748,10750,10751,10752,10754,10755,10756,10758,10759,10760,10762,10763,10764,10766,10767,10768,10770,10771,10772,10774,10775,10776,10778,10779,10780,10782,10783,10784,10786,10787,10788,10790,10791,10792,10794];

//Land 4
//var co_ordinates = ["(37,84)","(37,83)","(37,82)","(37,81)","(37,80)","(37,79)","(37,78)","(37,77)","(37,76)","(37,75)","(37,74)","(37,73)","(37,72)","(37,71)","(37,70)","(37,69)","(37,68)","(37,67)","(37,66)","(37,65)","(37,64)","(37,63)","(36,103)","(36,102)","(36,101)","(36,100)","(36,99)","(36,98)","(36,97)","(36,96)","(36,95)","(36,94)","(36,93)","(36,92)","(36,91)","(36,90)","(36,89)","(36,88)","(36,87)","(36,86)","(36,85)","(36,84)","(36,83)","(36,82)","(36,81)","(36,80)","(36,79)","(36,78)","(36,77)","(36,76)","(13,80)","(13,81)","(13,82)","(13,83)","(13,84)","(13,85)","(13,86)","(13,87)","(13,88)","(13,89)","(13,90)","(13,91)","(13,92)","(13,93)","(13,94)","(13,95)","(13,96)","(13,97)","(13,98)","(13,99)","(13,100)","(13,101)","(13,102)","(13,103)","(13,104)","(13,105)","(13,106)","(13,107)","(13,108)","(13,109)","(13,110)","(12,110)","(12,109)","(12,108)","(12,107)","(12,106)","(12,105)","(12,104)","(12,103)","(12,102)","(12,101)","(12,100)","(12,99)","(12,98)","(12,97)","(12,96)","(12,95)","(12,94)","(12,93)","(12,92)","(-22,98)","(-22,99)","(-22,100)","(-22,101)","(-23,101)","(-23,100)","(-23,99)","(-23,98)","(-23,97)","(-23,96)","(-23,95)","(-23,94)","(-23,93)","(-23,92)","(-23,91)","(-23,90)","(-23,89)","(-23,88)","(-23,87)","(-23,86)","(-23,85)","(-23,84)","(-23,83)","(-23,82)","(-23,81)","(-23,80)","(-23,79)","(-23,78)","(-23,77)","(-24,77)","(-24,78)","(-24,79)","(-24,80)","(-24,81)","(-24,82)","(-24,83)","(-24,84)","(-24,85)","(-24,86)","(-24,87)","(-24,88)","(-24,89)","(-24,90)","(-24,91)","(-24,92)","(-24,93)","(-24,94)","(-24,95)","(-24,96)","(-24,97)","(-54,43)","(-54,42)","(-54,41)","(-54,40)","(-54,39)","(-54,38)","(-54,37)","(-54,36)","(-54,35)","(-54,34)","(-54,33)","(-54,32)","(-54,31)","(-55,30)","(-55,31)","(-55,32)","(-55,33)","(-55,34)","(-55,35)","(-55,36)","(-55,37)","(-55,38)","(-55,39)","(-55,40)","(-55,41)","(-55,42)","(-55,43)","(-55,44)","(-55,45)","(-55,46)","(-55,47)","(-55,48)","(-55,49)","(-55,50)","(-55,51)","(-55,52)","(-55,53)","(-55,54)","(-55,55)","(-55,56)","(-55,57)","(-55,58)","(-55,59)","(-55,60)","(-55,61)","(-55,62)","(-55,63)","(-55,64)","(-55,65)","(-55,66)"];
//var emptyTokens  = [10795,10799,10803,10807,10811,10815,10819,10823,10827,10831,10835,10839,10843,10847,10851,10855,10859,10863,10867,10871,10875,10879,10883,10887,10891,10895,10899,10903,10907,10911,10915,10919,10923,10927,10931,10935,10939,10943,10947,10951,10955,10959,10963,10967,10971,10975,10979,10983,10987,10991,10796,10800,10804,10808,10812,10816,10820,10824,10828,10832,10836,10840,10844,10848,10852,10856,10860,10864,10868,10872,10876,10880,10884,10888,10892,10896,10900,10904,10908,10912,10916,10920,10924,10928,10932,10936,10940,10944,10948,10952,10956,10960,10964,10968,10972,10976,10980,10984,10988,10992,10797,10801,10805,10809,10813,10817,10821,10825,10829,10833,10837,10841,10845,10849,10853,10857,10861,10865,10869,10873,10877,10881,10885,10889,10893,10897,10901,10905,10909,10913,10917,10921,10925,10929,10933,10937,10941,10945,10949,10953,10957,10961,10965,10969,10973,10977,10981,10985,10989,10993,10798,10802,10806,10810,10814,10818,10822,10826,10830,10834,10838,10842,10846,10850,10854,10858,10862,10866,10870,10874,10878,10882,10886,10890,10894,10898,10902,10906,10910,10914,10918,10922,10926,10930,10934,10938,10942,10946,10950,10954,10958,10962,10966,10970,10974,10978,10982,10986,10990,10994];

//var co_ordinates = ["(36,75)","(12,91)","(-24,98)","(-55,67)","(36,74)","(12,90)","(-24,99)","(-55,68)","(36,73)","(12,89)","(-24,100)","(-55,69)","(36,72)","(12,88)","(-25,100)","(-55,70)","(36,71)","(12,87)","(-25,99)","(-55,71)","(36,70)","(12,86)","(-25,98)","(-55,72)","(36,69)","(12,85)","(-25,97)","(-55,73)","(36,68)","(12,84)","(-25,96)","(-55,74)","(36,67)","(12,83)","(-25,95)","(-55,75)","(36,66)","(12,82)","(-25,94)","(-55,76)","(36,65)","(12,81)","(-25,93)","(-55,77)","(36,64)","(12,80)","(-25,92)","(-55,78)","(36,63)","(12,79)","(-25,91)","(-55,79)","(35,104)","(12,78)","(-25,90)","(-55,80)","(35,103)","(12,77)","(-25,89)","(-55,81)","(35,102)","(12,76)","(-25,88)","(-55,82)","(35,101)","(12,75)","(-25,87)","(-55,83)","(35,100)","(12,74)","(-25,86)","(-55,84)","(35,99)","(12,73)","(-25,85)","(-55,85)","(35,98)","(12,72)","(-25,84)","(-55,86)","(35,97)","(11,72)","(-25,83)","(-55,87)","(35,96)","(11,73)","(-25,82)","(-55,88)","(35,95)","(11,74)","(-25,81)","(-55,89)","(35,94)","(11,75)","(-25,80)","(-55,90)","(35,93)","(11,76)","(-25,79)","(-55,91)","(35,92)","(11,77)","(-25,78)","(-55,92)","(35,91)","(11,78)","(-25,77)","(-55,93)","(35,90)","(11,79)","(-25,76)","(-55,94)","(35,89)","(11,80)","(-26,76)","(-55,95)","(35,88)","(11,81)","(-26,77)","(-55,96)","(35,87)","(11,82)","(-26,78)","(-56,96)","(35,86)","(11,83)","(-26,79)","(-56,95)","(35,85)","(11,84)","(-26,80)","(-56,94)","(35,84)","(11,85)","(-26,81)","(-56,93)","(35,83)","(11,86)","(-26,82)","(-56,92)","(35,82)","(11,87)","(-26,83)","(-56,91)","(35,81)","(11,88)","(-26,84)","(-56,90)","(35,80)","(11,89)","(-26,85)","(-56,89)","(35,79)","(11,90)","(-26,86)","(-56,88)","(35,78)","(11,91)","(-26,87)","(-56,87)","(35,77)","(11,92)","(-26,88)","(-56,86)","(35,76)","(11,93)","(-26,89)","(-56,85)","(35,75)","(11,94)","(-26,90)","(-56,84)","(35,74)","(11,95)","(-26,91)","(-56,83)","(35,73)","(11,96)","(-26,92)","(-56,82)","(35,72)","(11,97)","(-26,93)","(-56,81)","(35,71)","(11,98)","(-26,94)","(-56,80)","(35,70)","(11,99)","(-26,95)","(-56,79)","(35,69)","(11,100)","(-26,96)","(-56,78)"];
//var emptyTokens  =[10995,10996,10997,10998,10999,11000,11001,11002,11003,11004,11005,11006,11007,11008,11009,11010,11011,11012,11013,11014,11015,11016,11017,11018,11019,11020,11021,11022,11023,11024,11025,11026,11027,11028,11029,11030,11031,11032,11033,11034,11035,11036,11037,11038,11039,11040,11041,11042,11043,11044,11045,11046,11047,11048,11049,11050,11051,11052,11053,11054,11055,11056,11057,11058,11059,11060,11061,11062,11063,11064,11065,11066,11067,11068,11069,11070,11071,11072,11073,11074,11075,11076,11077,11078,11079,11080,11081,11082,11083,11084,11085,11086,11087,11088,11089,11090,11091,11092,11093,11094,11095,11096,11097,11098,11099,11100,11101,11102,11103,11104,11105,11106,11107,11108,11109,11110,11111,11112,11113,11114,11115,11116,11117,11118,11119,11120,11121,11122,11123,11124,11125,11126,11127,11128,11129,11130,11131,11132,11133,11134,11135,11136,11137,11138,11139,11140,11141,11142,11143,11144,11145,11146,11147,11148,11149,11150,11151,11152,11153,11154,11155,11156,11157,11158,11159,11160,11161,11162,11163,11164,11165,11166,11167,11168,11169,11170,11171,11172,11173,11174,11175,11176,11177,11178,11179,11180,11181,11182,11183,11184,11185,11186,11187,11188,11189,11190];

//var co_ordinates = ["(35,68)","(35,67)","(11,102)","(-26,98)","(-56,76)","(35,66)","(11,103)","(-26,99)","(-56,75)","(35,65)","(11,104)","(-27,99)","(-56,74)","(35,64)","(11,105)","(-27,98)","(-56,73)","(35,63)","(11,106)","(-27,97)","(-56,72)","(34,105)","(11,107)","(-27,96)","(-56,71)","(34,104)","(11,108)","(-27,95)","(-56,70)","(34,103)",
//"(11,109)","(-27,94)","(-56,69)","(34,102)","(11,110)","(-27,93)","(-56,68)","(34,101)","(10,110)","(-27,92)","(-56,67)","(34,100)","(10,109)","(-27,91)","(-56,66)","(34,99)","(10,108)","(-27,90)","(-56,65)","(34,98)","(10,107)","(-27,89)","(-56,64)","(34,97)","(10,106)","(-27,88)","(-56,63)","(34,96)","(10,105)","(-27,87)","(-56,62)","(34,95)","(10,104)","(-27,86)","(-56,61)","(34,94)","(10,103)","(-27,85)","(-56,60)","(34,93)","(10,102)","(-27,84)","(-56,59)","(34,92)","(10,101)","(-27,83)","(-56,58)","(34,91)","(10,100)","(-27,82)","(-56,57)","(34,90)","(10,99)","(-27,81)","(-56,56)","(34,89)","(10,98)","(-27,80)","(-56,55)","(34,88)","(10,97)","(-27,79)","(-56,54)","(34,87)","(10,96)","(-27,78)","(-56,53)","(34,86)","(10,95)","(-27,77)","(-56,52)","(34,85)","(10,94)","(-27,76)","(-56,51)","(34,84)","(10,93)","(-27,75)","(-56,50)","(34,83)","(10,92)","(-28,75)","(-56,49)","(34,82)","(10,91)","(-28,76)","(-56,48)","(34,81)","(10,90)","(-28,77)","(-56,47)","(34,80)","(10,89)","(-28,78)","(-56,46)","(34,79)","(10,88)","(-28,79)","(-56,45)","(34,78)","(10,87)","(-28,80)","(-56,44)","(34,77)","(10,86)","(-28,81)","(-56,43)","(34,76)","(10,85)","(-28,82)","(-56,42)","(34,75)","(10,84)","(-28,83)","(-56,41)","(34,74)","(10,83)","(-28,84)","(-56,40)","(34,73)","(10,82)","(-28,85)","(-56,39)","(34,72)","(10,81)","(-28,86)","(-56,38)","(34,71)","(10,80)","(-28,87)","(-56,37)","(34,70)","(10,79)","(-28,88)","(-56,36)","(34,69)","(10,78)","(-28,89)","(-56,35)","(34,68)","(10,77)","(-28,90)","(-56,34)","(34,67)","(10,76)","(-28,91)","(-56,33)","(34,66)","(10,75)","(-28,92)","(-56,32)","(34,65)","(10,74)","(-28,93)","(-56,31)","(34,64)","(10,73)","(-28,94)","(-56,30)","(34,63)","(9,110)","(-28,95)","(-56,29)","(33,106)","(9,109)","(-28,96)","(-57,28)","(9,108)","(9,107)","(9,106)","(9,105)","(9,104)","(9,103)","(9,102)","(9,101)","(9,100)","(9,99)","(9,98)","(9,97)","(9,96)","(9,95)","(9,94)","(9,93)","(9,92)","(9,91)","(9,90)","(9,89)","(9,88)","(9,87)","(9,86)","(9,85)","(9,84)","(9,83)","(9,82)","(9,81)","(9,80)","(9,79)","(9,78)","(9,77)","(9,76)","(9,75)","(9,74)","(8,74)","(8,75)","(8,76)","(8,77)","(8,78)","(8,79)","(8,80)","(8,81)","(8,82)","(8,83)","(8,84)","(8,85)","(8,86)","(8,87)","(8,88)"];
//var emptyTokens  =[11191,11195,11196,11197,11198,11199,11200,11201,11202,11203,11204,11205,11206,11207,11208,11209,11210,11211,11212,11213,11214,11215,11216,11217,11218,11219,11220,11221,11222,11223,11224,11225,11226,11227,11228,11229,11230,11231,11232,11233,11234,11235,11236,11237,11238,11239,11240,11241,11242,11243,11244,11245,11246,11247,11248,11249,11250,11251,11252,11253,11254,11255,11256,11257,11258,11259,11260,11261,11262,11263,11264,11265,11266,11267,11268,11269,11270,11271,11272,11273,11274,11275,11276,11277,11278,11279,11280,11281,11282,11283,11284,11285,11286,11287,11288,11289,11290,11291,11292,11293,11294,11295,11296,11297,11298,11299,11300,11301,11302,11303,11304,11305,11306,11307,11308,11309,11310,11311,11312,11313,11314,11315,11316,11317,11318,11319,11320,11321,11322,11323,11324,11325,11326,11327,11328,11329,11330,11331,11332,11333,11334,11335,11336,11337,11338,11339,11340,11341,11342,11343,11344,11345,11346,11347,11348,11349,11350,11351,11352,11353,11354,11355,11356,11357,11358,11359,11360,11361,11362,11363,11364,11365,11366,11367,11368,11369,11370,11371,11372,11373,11374,11375,11376,11377,11378,11379,11380,11381,11382,11383,11384,11385,11386,11387,11388,11389,11390,11392,11396,11400,11404,11408,11412,11416,11420,11424,11428,11432,11436,11440,11444,11448,11452,11456,11460,11464,11468,11472,11476,11480,11484,11488,11492,11496,11500,11504,11508,11512,11516,11520,11524,11528,11532,11536,11540,11544,11548,11552,11556,11560,11564,11568,11572,11576,11580,11584,11588];

//var co_ordinates = ["(-57,30)","(-57,31)","(-57,32)","(-57,33)","(-57,34)","(-57,35)","(-57,36)","(-57,37)","(-57,38)","(-57,39)","(-57,40)","(-57,41)","(-57,42)","(-57,43)","(-57,44)","(-57,45)","(-57,46)","(-57,47)","(-57,48)","(-57,49)","(-57,50)","(-57,51)","(-57,52)","(-57,53)","(-57,54)","(-57,55)","(-57,56)","(-57,57)","(-57,58)","(-57,59)","(-57,60)","(-57,61)","(-57,62)","(-57,63)","(-57,64)","(-57,65)","(-57,66)","(-57,67)","(-57,68)","(-57,69)","(-57,70)","(-57,71)","(-57,72)","(-57,73)","(-57,74)","(-57,75)","(-57,76)","(-57,77)","(-57,78)","(32,98)","(8,90)","(-30,96)","(-57,80)","(32,97)","(8,91)","(-30,97)","(-57,81)","(32,96)","(8,92)","(-30,98)","(-57,82)","(32,95)","(8,93)","(-30,99)","(-57,83)","(32,94)","(8,94)","(-31,99)","(-57,84)","(32,93)","(8,95)","(-31,98)","(-58,75)","(32,92)","(8,96)","(-31,97)","(-58,74)","(32,91)","(8,97)","(-31,96)","(-58,73)","(32,90)","(8,98)","(-31,95)","(-58,72)","(32,89)","(8,99)","(-31,94)","(-58,71)","(32,88)","(8,100)","(-31,93)","(-58,70)","(32,87)","(8,101)","(-31,92)","(-58,69)","(32,86)","(8,102)","(-31,91)","(-58,68)","(32,85)","(8,103)","(-31,90)","(-58,67)","(32,84)","(8,104)","(-31,89)","(-58,66)","(32,83)","(8,105)","(-31,88)","(-58,65)","(32,82)","(8,106)","(-31,87)","(-58,64)","(32,81)","(8,107)","(-31,86)","(-58,63)","(32,80)","(8,108)","(-31,85)","(-58,62)","(32,79)","(8,109)","(-31,84)","(-58,61)","(32,78)","(8,110)","(-31,83)","(-58,60)","(32,77)","(7,110)","(-31,82)","(-58,59)","(32,76)","(7,109)","(-31,81)","(-58,58)","(32,75)","(7,108)","(-31,80)","(-58,57)","(32,74)","(7,107)","(-31,79)","(-58,56)","(32,73)","(7,106)","(-31,78)","(-58,55)","(32,72)","(7,105)","(-31,77)","(-58,54)","(32,71)","(7,104)","(-31,76)","(-58,53)","(32,70)","(7,103)","(-31,75)","(-58,52)","(32,69)","(7,102)","(-31,74)","(-58,51)","(32,68)","(7,101)","(-32,74)","(-58,50)","(32,67)","(7,100)","(-32,75)","(-58,49)","(32,66)","(7,99)","(-32,76)","(-58,48)","(32,65)","(7,98)","(-32,77)","(-58,47)","(32,64)","(7,97)","(-32,78)","(-58,46)","(32,63)","(7,96)","(-32,79)","(-58,45)","(31,107)","(7,95)","(-32,80)","(-58,44)","(31,106)","(7,94)","(-32,81)","(-58,43)","(31,105)","(7,93)","(-32,82)","(-58,42)","(31,104)","(7,92)","(-32,83)","(-58,41)","(31,103)","(7,91)","(-32,84)","(-58,40)","(31,102)","(7,90)","(-32,85)","(-58,39)","(31,101)","(7,89)","(-32,86)","(-58,38)","(31,100)","(7,88)","(-32,87)","(-58,37)","(31,99)","(7,87)","(-32,88)","(-58,36)","(31,98)","(7,86)","(-32,89)"
//,"(-58,35)","(31,97)","(7,85)","(-32,90)","(-58,34)","(31,96)","(7,84)","(-32,91)","(-58,33)","(31,95)","(7,83)","(-32,92)","(-58,32)"];
//var emptyTokens = [11398,11402,11406,11410,11414,11418,11422,11426,11430,11434,11438,11442,11446,11450,11454,11458,11462,11466,11470,11474,11478,11482,11486,11490,11494,11498,11502,11506,11510,11514,11518,11522,11526,11530,11534,11538,11542,11546,11550,11554,11558,11562,11566,11570,11574,11578,11582,11586,11590,11595,11596,11597,11598,11599,11600,11601,11602,11603,11604,11605,11606,11607,11608,11609,11610,11611,11612,11613,11614,11615,11616,11617,11618,11619,11620,11621,11622,11623,11624,11625,11626,11627,11628,11629,11630,11631,11632,11633,11634,11635,11636,11637,11638,11639,11640,11641,11642,11643,11644,11645,11646,11647,11648,11649,11650,11651,11652,11653,11654,11655,11656,11657,11658,11659,11660,11661,11662,11663,11664,11665,11666,11667,11668,11669,11670,11671,11672,11673,11674,11675,11676,11677,11678,11679,11680,11681,11682,11683,11684,11685,11686,11687,11688,11689,11690,11691,11692,11693,11694,11695,11696,11697,11698,11699,11700,11701,11702,11703,11704,11705,11706,11707,11708,11709,11710,11711,11712,11713,11714,11715,11716,11717,11718,11719,11720,11721,11722,11723,11724,11725,11726,11727,11728,11729,11730,11731,11732,11733,11734,11735,11736,11737,11738,11739,11740,11741,11742,11743,11744,11745,11746,11747,11748,11749,11750,11751,11752,11753,11754,11755,11756,11757,11758,11759,11760,11761,11762,11763,11764,11765,11766,11767,11768,11769,11770,11771,11772,11773,11774,11775,11776,11777,11778,11779,11780,11781,11782,11783,11784,11785,11786,11787,11788,11789,11790];

//var co_ordinates = ["(-51,97)","(-14,88)","(19,77)","(-51,98)","(-14,87)","(19,78)","(-50,98)","(-14,86)","(19,79)","(-50,97)","(-14,85)","(19,80)","(-50,96)","(-14,84)","(19,81)","(-50,95)","(-14,83)","(19,82)","(-50,94)","(-14,82)","(19,83)","(-50,93)","(-13,83)","(19,84)","(-50,92)","(-13,84)","(19,85)","(-50,91)","(-13,85)","(19,86)","(-50,90)","(-13,86)","(19,87)","(-50,89)","(-13,87)","(19,88)","(-50,88)","(-13,88)","(19,89)","(-50,87)","(-13,89)","(19,90)","(-50,86)","(-13,90)","(19,91)","(-50,85)","(-13,91)","(19,92)","(-50,84)","(-13,92)","(19,93)","(-50,83)","(-13,93)","(19,94)","(-50,82)","(-13,94)","(19,95)","(-50,81)","(-13,95)","(19,96)","(-50,80)","(-13,96)","(19,97)","(-50,79)","(-13,97)","(19,98)","(-50,78)","(-13,98)","(19,99)","(-50,77)","(-13,99)","(19,100)","(-50,76)","(-13,100)","(19,101)","(-50,75)","(-13,101)","(19,102)","(-50,74)","(-13,102)","(19,103)","(-50,73)","(-13,103)","(19,104)","(-50,72)","(-13,104)","(19,105)","(-50,71)","(-13,105)","(19,106)","(-50,70)","(-13,106)","(19,107)","(-50,69)","(-13,107)","(19,108)","(-50,68)","(-12,108)","(19,109)","(-50,67)","(-12,107)","(19,110)","(-50,66)","(-12,106)","(20,72)","(-50,65)","(-12,105)","(20,73)","(-50,64)","(-12,104)","(20,74)","(-50,63)","(-12,103)","(20,75)","(-49,64)","(-12,102)","(20,76)","(-49,65)","(-12,101)","(20,77)","(-49,66)","(-12,100)","(20,78)","(-49,67)","(-12,99)","(20,79)","(-49,68)","(-12,98)","(20,80)","(-49,69)","(-12,97)","(20,81)","(-49,70)","(-12,96)","(20,82)","(-49,71)","(-12,95)","(20,83)","(-49,72)","(-12,94)","(20,84)","(-49,73)","(-12,93)","(20,85)","(-49,74)","(-12,92)","(20,86)","(-49,75)","(-12,91)","(20,87)","(-49,76)","(-12,90)","(20,88)","(-49,77)","(-12,89)","(20,89)","(-49,78)","(-12,88)","(20,90)","(-49,79)","(-12,87)","(20,91)","(-49,80)","(-12,86)","(20,92)","(-49,81)","(-12,85)","(20,93)","(-49,82)","(-12,84)","(20,94)","(-49,83)","(-12,83)","(20,95)","(-49,84)","(-11,84)","(20,96)","(-49,85)","(-11,85)","(20,97)","(-49,86)","(-11,86)","(20,98)","(-49,87)","(-11,87)","(20,99)","(-49,88)","(-11,88)","(20,100)","(-49,89)","(-11,89)","(20,101)","(-49,90)","(-11,90)","(20,102)","(-49,91)","(-11,91)","(20,103)","(-49,92)","(-11,92)","(20,104)","(-49,93)","(-11,93)","(20,105)","(-49,94)","(-11,94)","(20,106)","(-49,95)","(-11,95)","(20,107)","(-49,96)","(-11,96)","(20,108)","(-49,97)","(-11,97)","(20,109)","(-49,98)","(-11,98)","(20,110)","(-48,99)","(-11,99)","(21,71)","(-48,98)","(-11,100)","(21,72)","(-48,97)","(-11,101)","(21,73)","(-48,96)","(-11,102)","(21,74)","(-48,95)","(-11,103)","(21,75)","(-48,94)","(-11,104)","(21,76)","(-48,93)","(-11,105)","(21,77)","(-48,92)","(-11,106)","(21,78)","(-48,91)","(-11,107)","(21,79)","(-48,90)","(-11,108)","(21,80)","(-48,89)","(-10,108)","(21,81)","(-48,88)","(-10,107)","(21,82)","(-48,87)","(-10,106)","(21,83)","(-48,86)","(-10,105)","(21,84)","(-48,85)","(-10,104)","(21,85)","(-48,84)","(-10,103)","(21,86)","(-48,83)","(-10,102)","(21,87)","(-48,82)","(-10,101)","(21,88)","(-48,81)","(-10,100)","(21,89)","(-48,80)","(-10,99)","(21,90)","(-48,79)","(-10,98)","(21,91)","(-48,78)","(-10,97)","(21,92)","(-48,77)","(-10,96)","(21,93)","(-48,76)","(-10,95)","(21,94)","(-48,75)","(-10,94)","(21,95)","(-48,74)","(-10,93)","(21,96)","(-48,73)","(-10,92)","(21,97)","(-48,72)","(-10,91)","(21,98)","(-48,71)","(-10,90)","(21,99)","(-48,70)","(-10,89)","(21,100)","(-48,69)","(-10,88)","(21,101)","(-48,68)","(-10,87)","(21,102)","(-48,67)","(-10,86)","(21,103)","(-48,66)","(-10,85)","(21,104)","(-47,68)","(-9,86)","(21,105)","(-47,69)","(-9,87)","(21,106)","(-47,70)","(-9,88)","(21,107)","(-47,71)","(-9,89)","(21,108)","(-47,72)","(-9,90)","(21,109)","(-47,73)","(-9,91)","(22,69)","(-47,74)","(-9,92)","(22,70)","(-47,75)","(-9,93)","(22,71)","(-47,76)","(-9,94)","(22,72)","(-47,77)","(-9,95)","(22,73)","(-47,78)","(-9,96)","(22,74)","(-47,79)","(-9,97)","(22,75)","(-47,80)","(-9,98)","(22,76)","(-47,81)","(-9,99)","(22,77)","(-47,82)","(-9,100)","(22,78)","(-47,83)","(-9,101)","(22,79)","(-47,84)","(-9,102)","(22,80)","(-47,85)","(-9,103)","(22,81)","(-47,86)","(-9,104)","(22,82)","(-47,87)","(-9,105)","(22,83)","(-47,88)","(-9,106)","(22,84)","(-47,89)","(-9,107)","(22,85)","(-47,90)","(-9,108)","(22,86)","(-47,91)","(-8,109)","(22,87)","(-47,92)","(-8,108)","(22,88)","(-47,93)","(-8,107)","(22,89)","(-47,94)","(-8,106)","(22,90)","(-47,95)","(-8,105)","(22,91)","(-47,96)","(-8,104)","(22,92)","(-47,97)","(-8,103)","(22,93)","(-47,98)","(-8,102)","(22,94)","(-47,99)","(-8,101)","(22,95)","(-46,100)","(-8,100)","(22,96)","(-46,99)","(-8,99)","(22,97)","(-46,98)","(-8,98)","(22,98)","(-46,97)","(-8,97)","(22,99)","(-46,96)","(-8,96)","(22,100)","(-46,95)","(-8,95)","(22,101)","(-46,94)","(-8,94)","(22,102)","(-46,93)","(-8,93)","(22,103)","(-46,92)","(-8,92)","(22,104)","(-46,91)","(-8,91)","(22,105)","(-46,90)","(-8,90)","(22,106)","(-46,89)","(-8,89)","(22,107)","(-46,88)","(-8,88)","(22,108)","(-46,87)","(-8,87)","(22,109)","(-46,86)","(-8,86)","(23,109)","(-46,85)","(-7,87)","(23,108)","(-46,84)","(-7,88)","(23,107)","(-46,83)","(-7,89)","(23,106)","(-46,82)","(-7,90)","(23,105)","(-46,81)","(-7,91)","(23,104)","(-46,80)","(-7,92)","(23,103)","(-46,79)","(-7,93)","(23,102)","(-46,78)","(-7,94)","(23,101)","(-46,77)","(-7,95)","(23,100)","(-46,76)","(-7,96)","(23,99)","(-46,75)","(-7,97)","(23,98)","(-46,74)","(-7,98)","(23,97)","(-46,73)","(-7,99)","(23,96)","(-46,72)","(-7,100)","(23,95)","(-46,71)","(-7,101)","(23,94)","(-46,70)","(-7,102)","(23,93)","(-45,71)","(-7,103)","(23,92)","(-45,72)","(-7,104)","(23,91)","(-45,73)","(-7,105)","(23,90)","(-45,74)","(-7,106)","(23,89)","(-45,75)","(-7,107)","(23,88)","(-45,76)","(-7,108)","(23,87)","(-45,77)","(-7,109)","(23,86)","(-45,78)","(-6,109)","(23,85)","(-45,79)","(-6,108)","(23,84)","(-45,80)","(-6,107)","(23,83)","(-45,81)","(-6,106)","(23,82)","(-45,82)","(-6,105)","(23,81)","(-45,83)","(-6,104)","(23,80)","(-45,84)","(-6,103)","(23,79)","(-45,85)","(-6,102)","(23,78)","(-45,86)","(-6,101)","(23,77)","(-45,87)","(-6,100)","(23,76)","(-45,88)","(-6,99)","(23,75)","(-45,89)","(-6,98)","(23,74)","(-45,90)","(-6,97)","(23,73)","(-45,91)","(-6,96)","(23,72)","(-45,92)","(-6,95)","(23,71)","(-45,93)","(-6,94)","(23,70)","(-45,94)","(-6,93)","(23,69)","(-45,95)","(-6,92)","(23,68)","(-45,96)","(-6,91)","(24,109)","(-45,97)","(-6,90)","(24,108)","(-45,98)","(-6,89)","(24,107)","(-45,99)","(-6,88)","(24,106)","(-45,100)","(-6,87)","(24,105)","(-44,100)","(-5,87)","(24,104)","(-44,99)","(-5,88)","(24,103)","(-44,98)","(-5,89)","(24,102)","(-44,97)","(-5,90)","(24,101)","(-44,96)","(-5,91)","(24,100)","(-44,95)","(-5,92)","(24,99)","(-44,94)","(-5,93)","(24,98)","(-44,93)","(-5,94)","(24,97)","(-44,92)","(-5,95)","(24,96)","(-44,91)","(-5,96)","(24,95)","(-44,90)","(-5,97)","(24,94)","(-44,89)","(-5,98)","(24,93)","(-44,88)","(-5,99)","(24,92)","(-44,87)","(-5,100)","(24,91)","(-44,86)","(-5,101)","(24,90)","(-44,85)","(-5,102)","(24,89)","(-44,84)","(-5,103)","(24,88)","(-44,83)","(-5,104)","(24,87)","(-44,82)","(-5,105)","(24,86)","(-44,81)","(-5,106)","(24,85)","(-44,80)","(-5,107)","(24,84)","(-44,79)","(-5,108)","(24,83)","(-44,78)","(-5,109)","(24,82)","(-44,77)","(-4,110)","(24,81)","(-44,76)","(-4,109)","(24,80)","(-44,75)","(-4,108)","(24,79)","(-44,74)","(-4,107)","(24,78)","(-44,73)","(-4,106)","(24,77)","(-44,72)","(-4,105)","(24,76)","(-43,73)","(-4,104)","(24,75)","(-43,74)","(-4,103)","(24,74)","(-43,75)","(-4,102)","(24,73)","(-43,76)","(-4,101)","(24,72)","(-43,77)","(-4,100)","(24,71)","(-43,78)","(-4,99)","(24,70)","(-43,79)","(-4,98)","(24,69)","(-43,80)","(-4,97)","(24,68)","(-43,81)","(-4,96)","(24,67)","(-43,82)","(-4,95)","(25,67)","(-43,83)","(-4,94)","(25,68)","(-43,84)","(-4,93)","(25,69)","(-43,85)","(-4,92)","(25,70)","(-43,86)","(-4,91)","(25,71)","(-43,87)","(-4,90)","(25,72)","(-43,88)","(-4,89)","(25,73)","(-43,89)","(-4,88)","(25,74)","(-43,90)","(-4,87)","(25,75)","(-43,91)","(-3,87)","(25,76)","(-43,92)","(-3,88)","(25,77)","(-43,93)","(-3,89)","(25,78)","(-43,94)","(-3,90)","(25,79)","(-43,95)","(-3,91)","(25,80)","(-43,96)","(-3,92)","(25,81)","(-43,97)","(-3,93)","(25,82)","(-43,98)","(-3,94)","(25,83)","(-43,99)","(-3,95)","(25,84)","(-43,100)","(-3,96)","(25,85)","(-42,100)","(-3,97)","(25,86)","(-42,99)","(-3,98)","(25,87)","(-42,98)","(-3,99)","(25,88)","(-42,97)","(-3,100)","(25,89)","(-42,96)","(-3,101)","(25,90)","(-42,95)","(-3,102)","(25,91)","(-42,94)","(-3,103)","(25,92)","(-42,93)","(-3,104)","(25,93)","(-42,92)","(-3,105)","(25,94)","(-42,91)","(-3,106)","(25,95)","(-42,90)","(-3,107)","(25,96)","(-42,89)","(-3,108)","(25,97)","(-42,88)","(-3,109)","(25,98)","(-42,87)","(-3,110)","(25,99)","(-42,86)","(-2,110)","(25,100)","(-42,85)","(-2,109)","(25,101)","(-42,84)","(-2,108)","(25,102)","(-42,83)","(-2,107)","(25,103)","(-42,82)","(-2,106)","(25,104)","(-42,81)","(-2,105)","(25,105)","(-42,80)","(-2,104)","(25,106)","(-42,79)","(-2,103)","(25,107)","(-42,78)","(-2,102)","(25,108)","(-42,77)","(-2,101)","(25,109)","(-42,76)","(-2,100)","(26,66)","(-42,75)","(-2,99)","(26,67)","(-42,74)","(-2,98)","(26,68)","(-41,74)","(-2,97)","(26,69)","(-41,75)","(-2,96)","(26,70)","(-41,76)","(-2,95)","(26,71)","(-41,77)","(-2,94)","(26,72)","(-41,78)","(-2,93)","(26,73)","(-41,79)","(-2,92)","(26,74)","(-41,80)","(-2,91)","(26,75)","(-41,81)","(-2,90)","(26,76)"];
//var emptyTokens = [13478,13477,13476,13475,13474,13473,13472,13471,13470,13469,13468,13467,13466,13465,13464,13463,13462,13461,13460,13459,13458,13457,13456,13455,13454,13453,13452,13451,13450,13449,13448,13447,13446,13445,13444,13443,13442,13441,13440,13439,13438,13437,13436,13435,13434,13433,13432,13431,13430,13429,13428,13427,13426,13425,13424,13423,13422,13421,13420,13419,13418,13417,13416,13415,13414,13413,13412,13411,13410,13409,13408,13407,13406,13405,13404,13403,13402,13401,13400,13399,13398,13397,13396,13395,13394,13393,13392,13391,13390,13389,13388,13387,13386,13385,13384,13383,13382,13381,13380,13379,13378,13377,13376,13375,13374,13373,13372,13371,13370,13369,13368,13367,13366,13365,13364,13363,13362,13361,13360,13359,13358,13357,13356,13355,13354,13353,13352,13351,13350,13349,13348,13347,13346,13345,13344,13343,13342,13341,13340,13339,13338,13337,13336,13335,13334,13333,13332,13331,13330,13329,13328,13327,13326,13325,13324,13323,13322,13321,13320,13319,13318,13317,13316,13315,13314,13313,13312,13311,13310,13309,13308,13307,13306,13305,13304,13303,13302,13301,13300,13299,13298,13297,13296,13295,13294,13293,13292,13291,13290,13289,13288,13287,13286,13285,13284,13283,13282,13281,13280,13279,13278,13277,13276,13275,13274,13273,13272,13271,13270,13269,13268,13267,13266,13265,13264,13263,13262,13261,13260,13259,13258,13257,13256,13255,13254,13253,13252,13251,13250,13249,13248,13247,13246,13245,13244,13243,13242,13241,13240,13239,13238,13237,13236,13235,13234,13233,13232,13231,13230,13229,13228,13227,13226,13225,13224,13223,13222,13221,13220,13219,13218,13217,13216,13215,13214,13213,13212,13211,13210,13209,13208,13207,13206,13205,13204,13203,13202,13201,13200,13199,13198,13197,13196,13195,13194,13193,13192,13191,13190,13189,13188,13187,13186,13185,13184,13183,13182,13181,13180,13179,13178,13177,13176,13175,13174,13173,13172,13171,13170,13169,13168,13167,13166,13165,13164,13163,13162,13161,13160,13159,13158,13157,13156,13155,13154,13153,13152,13151,13150,13149,13148,13147,13146,13145,13144,13143,13142,13141,13140,13139,13138,13137,13136,13135,13134,13133,13132,13131,13130,13129,13128,13127,13126,13125,13124,13123,13122,13121,13120,13119,13118,13117,13116,13115,13114,13113,13112,13111,13110,13109,13108,13107,13106,13105,13104,13103,13102,13101,13100,13099,13098,13097,13096,13095,13094,13093,13092,13091,13090,13089,13088,13087,13086,13085,13084,13083,13082,13081,13080,13079,13078,13077,13076,13075,13074,13073,13072,13071,13070,13069,13068,13067,13066,13065,13064,13063,13062,13061,13060,13059,13058,13057,13056,13055,13054,13053,13052,13051,13050,13049,13048,13047,13046,13045,13044,13043,13042,13041,13040,13039,13038,13037,13036,13035,13034,13033,13032,13031,13030,13029,13028,13027,13026,13025,13024,13023,13022,13021,13020,13019,13018,13017,13016,13015,13014,13013,13012,13011,13010,13009,13008,13007,13006,13005,13004,13003,13002,13001,13000,12999,12998,12997,12996,12995,12994,12993,12992,12991,12990,12989,12988,12987,12986,12985,12984,12983,12982,12981,12980,12979,12978,12977,12976,12975,12974,12973,12972,12971,12970,12969,12968,12967,12966,12965,12964,12963,12962,12961,12960,12959,12958,12957,12956,12955,12954,12953,12952,12951,12950,12949,12948,12947,12946,12945,12944,12943,12942,12941,12940,12939,12938,12937,12936,12935,12934,12933,12932,12931,12930,12929,12928,12927,12926,12925,12924,12923,12922,12921,12920,12919,12918,12917,12916,12915,12914,12913,12912,12911,12910,12909,12908,12907,12906,12905,12904,12903,12902,12901,12900,12899,12898,12897,12896,12895,12894,12893,12892,12891,12890,12889,12888,12887,12886,12885,12884,12883,12882,12881,12880,12879,12878,12877,12876,12875,12874,12873,12872,12871,12870,12869,12868,12867,12866,12865,12864,12863,12862,12861,12860,12859,12858,12857,12856,12855,12854,12853,12852,12851,12850,12849,12848,12847,12846,12845,12844,12843,12842,12841,12840,12839,12838,12837,12836,12835,12834,12833,12832,12831,12830,12829,12828,12827,12826,12825,12824,12823,12822,12821,12820,12819,12818,12817,12816,12815,12814,12813,12812,12811,12810,12809,12808,12807,12806,12805,12804,12803,12802,12801,12800,12799,12798,12797,12796,12795,12794,12793,12792,12791,12790,12789,12788,12787,12786,12785,12784,12783,12782,12781,12780,12779,12778,12777,12776,12775,12774,12773,12772,12771,12770,12769,12768,12767,12766,12765,12764,12763,12762,12761,12760,12759,12758,12757,12756,12755,12754,12753,12752,12751,12750,12749,12748,12747,12746,12745,12744,12743,12742,12741,12740,12739,12738,12737,12736,12735,12734,12733,12732,12731,12730,12729,12728,12727,12726,12725,12724,12723,12722,12721,12720,12719,12718,12717,12716,12715,12714,12713,12712,12711,12710,12709,12708,12707,12706,12705,12704,12703,12702,12701,12700,12699,12698,12697,12696,12695,12694,12693,12692,12691,12690,12689,12688,12687,12686,12685,12684,12683,12682,12681,12680,12679,12678,12677,12676,12675,12674,12673,12672,12671,12670,12669,12668,12667,12666,12665,12664,12663,12662,12661,12660,12659,12658,12657,12656,12655,12654,12653,12652,12651,12650,12649,12648,12647,12646,12645,12644,12643,12642,12641,12640,12639,12638,12637,12636,12635,12634,12633,12632,12631,12630,12629,12628,12627,12626,12625,12624,12623,12622,12621,12620,12619,12618,12617,12616,12615,12614,12613,12612,12611,12610,12609,12608,12607,12606,12605,12604,12603];

//var co_ordinates = ["(-21,79)","(-21,78)","(-21,77)","(-22,77)","(-22,78)","(-22,79)","(-22,80)","(-22,81)","(-22,82)","(-22,83)","(-22,84)","(-22,85)","(-22,86)","(-22,87)","(-22,88)","(-22,89)","(-22,90)","(-22,91)","(-22,92)","(-22,93)","(-22,94)","(-22,95)","(-22,96)","(-22,97)","(11,101)","(-26,97)","(-56,77)","(33,105)","(-28,97)","(-57,29)","(33,104)","(-28,98)","(33,103)","(33,102)","(33,101)","(33,100)","(33,99)","(33,98)","(33,97)","(33,96)","(33,95)","(33,94)","(33,93)","(33,92)","(33,91)","(33,90)","(33,89)","(33,88)","(33,87)","(33,86)","(33,85)","(33,84)","(33,83)","(33,82)","(33,81)","(33,80)","(33,79)","(33,78)"];
//var emptyTokens = [10701,10705,10709,10713,10717,10721,10725,10729,10733,10737,10741,10745,10749,10753,10757,10761,10765,10769,10773,10777,10781,10785,10789,10793,11192,11193,11194,11391,11393,11394,11395,11397,11399,11403,11407,11411,11415,11419,11423,11427,11431,11435,11439,11443,11447,11451,11455,11459,11463,11467,11471,11475,11479,11483,11487,11491,11495,11499];
/*
var co_ordinates = ["(31,94)","(31,93)","(31,92)","(7,82)","(7,81)","(-32,93)","(-32,94)","(-58,31)","(-58,30)","(-28,99)","(-29,99)","(-29,98)","(-29,97)","(-29,96)","(-29,95)","(-29,94)","(-29,93)","(-29,92)","(-29,91)","(-29,90)","(-29,89)","(-29,88)","(-29,87)","(-29,86)","(-29,85)","(-29,84)","(-29,83)","(-29,82)","(-29,81)","(-29,80)","(-29,79)","(-29,78)","(-29,77)","(-29,76)","(-29,75)","(33,77)","(-29,74)","(33,76)","(-30,74)","(33,75)","(-30,75)","(33,74)","(-30,76)","(-30,77)","(-30,78)","(-30,79)","(-30,80)","(-30,81)","(-30,82)","(-30,83)","(-30,84)","(-30,85)","(-30,86)","(-30,87)","(-30,88)","(-30,89)","(-30,90)","(-30,91)","(-30,92)","(-30,93)","(-30,94)","(-30,95)","(32,99)","(8,89)","(-57,79)","(33,73)","(33,72)","(33,71)","(33,70)","(33,69)","(33,68)","(33,67)","(33,66)","(33,65)","(33,64)","(33,63)","(32,106)","(32,105)","(32,104)","(32,103)","(32,102)","(32,101)","(32,100)"];
var emptyTokens = [11791,11795,11799,11792,11796,11793,11797,11794,11798,11401,11405,11409,11413,11417,11421,11425,11429,11433,11437,11441,11445,11449,11453,11457,11461,11465,11469,11473,11477,11481,11485,11489,11493,11497,11501,11503,11505,11507,11509,11511,11513,11515,11517,11521,11525,11529,11533,11537,11541,11545,11549,11553,11557,11561,11565,11569,11573,11577,11581,11585,11589,11593,11591,11592,11594,11519,11523,11527,11531,11535,11539,11543,11547,11551,11555,11559,11563,11567,11571,11575,11579,11583,11587];
*/
//var co_ordinates = ["(37,-84)","(36,-84)","(35,-84)","(34,-84)","(33,-84)","(32,-84)","(31,-84)","(30,-84)","(29,-84)","(28,-84)","(27,-84)","(26,-84)","(25,-84)","(24,-84)","(23,-84)","(22,-84)","(21,-84)","(20,-84)","(19,-84)","(18,-84)","(17,-84)","(16,-84)","(15,-84)","(14,-84)","(13,-84)","(12,-84)","(11,-84)","(10,-84)","(9,-84)","(8,-84)","(7,-84)","(6,-84)","(5,-84)","(4,-84)","(3,-84)","(2,-84)","(1,-84)","(0,-84)","(-1,-84)","(-2,-84)","(-3,-84)","(-4,-84)","(-5,-84)","(-6,-84)","(-7,-84)","(-8,-84)","(-9,-84)","(-10,-84)","(-11,-84)","(-12,-84)","(-13,-84)","(-14,-84)","(-15,-84)"];
//var emptyTokens = [15134,15135,15136,15137,15138,15139,15140,15141,15142,15143,15144,15145,15146,15147,15148,15149,15150,15151,15152,15153,15154,15155,15156,15157,15158,15159,15160,15161,15162,15163,15164,15165,15166,15167,15168,15169,15170,15171,15172,15173,15174,15175,15176,15177,15178,15179,15180,15181,15182,15183,15184,15185,15186];

//var co_ordinates =["(37,-79)","(36,-79)","(35,-79)","(34,-79)","(33,-79)","(32,-79)","(31,-79)","(30,-79)","(29,-79)","(28,-79)","(27,-79)","(26,-79)","(25,-79)","(24,-79)","(23,-79)","(22,-79)","(21,-79)","(20,-79)","(19,-79)","(18,-79)","(17,-79)","(16,-79)","(15,-79)","(14,-79)","(13,-79)","(12,-79)","(11,-79)","(10,-79)","(9,-79)","(8,-79)","(7,-79)","(6,-79)","(5,-79)","(4,-79)","(3,-79)"];
//var emptyTokens = [14927,14928,14929,14930,14931,14932,14933,14934,14935,14936,14937,14938,14939,14940,14941,14942,14943,14944,14945,14946,14947,14948,14949,14950,14951,14952,14953,14954,14955,14956,14957,14958,14959,14960,14961];

//var co_ordinates =["(13,-15)","(13,-16)","(13,-17)","(13,4)","(13,5)","(13,6)","(13,7)","(13,8)","(12,10)","(12,9)","(12,8)","(12,7)","(12,6)","(12,5)","(12,4)","(12,3)","(12,-13)","(12,-14)","(12,-15)","(12,-16)","(12,-17)","(12,-18)","(11,-19)","(11,-18)","(11,-17)","(11,-16)","(11,-15)","(11,-14)","(11,-13)","(11,-12)","(11,-11)","(11,-10)","(11,-9)","(11,-8)","(11,-7)","(11,-6)","(11,-5)","(11,-4)","(11,-3)","(11,2)","(11,3)","(11,4)","(11,5)","(11,6)","(11,7)","(11,8)","(11,9)","(11,10)","(11,11)","(11,12)","(11,13)","(10,15)","(10,14)","(10,13)","(10,12)","(10,11)","(10,10)","(10,9)","(10,8)","(10,7)","(10,6)","(10,5)","(10,4)","(10,3)","(10,2)","(10,1)","(10,0)","(10,-1)","(10,-2)","(10,-3)","(10,-4)","(10,-5)","(10,-6)","(10,-7)","(10,-8)","(10,-9)","(10,-10)","(10,-11)","(10,-12)","(10,-13)","(10,-14)","(10,-15)","(10,-16)","(10,-17)","(10,-18)","(10,-19)","(10,-20)","(10,-21)","(9,-22)","(9,-21)","(9,-20)","(9,-19)","(9,-18)","(9,-17)","(9,-16)","(9,-15)","(9,-14)","(9,-13)","(9,-12)","(9,-11)"];
//var emptyTokens = [16400,16401,16402,16403,16404,16405,16406,16407,16408,16409,16410,16411,16412,16413,16414,16415,16416,16417,16418,16419,16420,16421,16422,16423,16424,16425,16426,16427,16428,16429,16430,16431,16432,16433,16434,16435,16436,16437,16438,16439,16440,16441,16442,16443,16444,16445,16446,16447,16448,16449,16450,16451,16452,16453,16454,16455,16456,16457,16458,16459,16460,16461,16462,16463,16464,16465,16466,16467,16468,16469,16470,16471,16472,16473,16474,16475,16476,16477,16478,16479,16480,16481,16482,16483,16484,16485,16486,16487,16488,16489,16490,16491,16492,16493,16494,16495,16496,16497,16498,16499];

//var co_ordinates = ["(-6,-17)","(-6,-16)","(-6,-15)","(-6,-14)","(-6,-13)","(-6,-12)","(-6,-11)","(-6,-10)","(-6,-9)","(-6,-8)","(-6,-7)","(-6,-6)","(-6,-5)","(-6,-4)","(-6,-3)","(-6,-2)","(-6,-1)","(-6,0)","(-6,1)","(-6,2)","(-6,3)","(-6,4)","(-6,5)","(-6,6)","(-6,7)","(-6,8)","(-6,9)","(-6,10)","(-6,11)","(-6,12)","(-6,13)","(-6,14)","(-6,15)","(-6,16)","(-6,17)","(-6,18)","(-6,19)","(-6,20)","(-6,21)","(-6,22)","(-6,23)","(-6,24)","(-6,25)","(-6,26)","(-6,27)","(-6,28)","(-7,29)","(-7,28)","(-7,27)","(-7,26)","(-7,25)","(-7,24)","(-7,23)","(-7,22)","(-7,21)","(-7,20)","(-7,19)","(-7,18)","(-7,17)","(-7,16)","(-7,15)","(-7,14)","(-7,13)","(-7,12)","(-7,11)","(-7,10)","(-7,9)","(-7,8)","(-7,7)","(-7,6)","(-7,5)","(-7,4)","(-7,3)","(-7,2)","(-7,1)","(-7,0)","(-7,-1)","(-7,-2)","(-7,-3)","(-7,-4)","(-7,-5)","(-7,-6)","(-7,-7)","(-7,-8)","(-7,-9)","(-7,-10)","(-7,-11)","(-7,-12)","(-7,-13)","(-7,-14)","(-8,-10)","(-8,-9)","(-8,-8)","(-8,-7)","(-8,-6)","(-8,-5)","(-8,-4)","(-8,-3)","(-8,-2)","(-8,-1)"];
//var emptyTokens = [17367,17368,17369,17370,17371,17372,17373,17374,17375,17376,17377,17378,17379,17380,17381,17382,17383,17384,17385,17386,17387,17388,17389,17390,17391,17392,17393,17394,17395,17396,17397,17398,17399,17400,17401,17402,17403,17404,17405,17406,17407,17408,17409,17410,17411,17412,17413,17414,17415,17416,17417,17418,17419,17420,17421,17422,17423,17424,17425,17426,17427,17428,17429,17430,17431,17432,17433,17434,17435,17436,17437,17438,17439,17440,17441,17442,17443,17444,17445,17446,17447,17448,17449,17450,17451,17452,17453,17454,17455,17456,17457,17458,17459,17460,17461,17462,17463,17464,17465,17466];

var co_ordinates = ["(9,-10)","(9,-9)","(9,-8)","(9,-7)","(9,-6)","(9,-5)","(9,-4)","(9,-3)","(9,-2)","(9,-1)","(9,0)","(9,1)","(9,2)","(9,3)","(9,4)","(9,5)","(9,6)","(9,7)","(9,8)","(9,9)","(9,10)","(9,11)","(9,12)","(9,13)","(9,14)","(9,15)","(9,16)","(8,17)","(8,16)","(8,15)","(8,14)","(8,13)","(8,12)","(8,11)","(8,10)","(8,9)","(8,8)","(8,7)","(8,6)","(8,5)","(8,4)","(8,3)","(8,2)","(8,1)","(8,0)","(8,-1)","(8,-2)","(8,-3)","(8,-4)","(8,-5)","(8,-6)","(8,-7)","(8,-8)","(8,-9)","(8,-10)","(8,-11)","(8,-12)","(8,-13)","(8,-14)","(8,-15)","(8,-16)","(8,-17)","(8,-18)","(8,-19)","(8,-20)","(8,-21)","(8,-22)","(8,-23)","(7,-24)","(7,-23)","(7,-22)","(7,-21)","(7,-20)","(7,-19)","(7,-18)","(7,-17)","(7,-16)","(7,-15)","(7,-14)","(7,-13)","(7,-12)","(7,-11)","(7,-10)","(7,-9)","(7,-8)","(7,-7)","(7,-6)","(7,-5)","(7,-4)","(7,-3)","(7,-2)","(7,-1)","(7,0)","(7,1)","(7,2)","(7,3)","(7,4)","(7,5)","(7,6)"];
var emptyTokens = [16500,16501,16502,16503,16504,16505,16506,16507,16508,16509,16510,16511,16512,16513,16514,16515,16516,16517,16518,16519,16520,16521,16522,16523,16524,16525,16526,16527,16528,16529,16530,16531,16532,16533,16534,16535,16536,16537,16538,16539,16540,16541,16542,16543,16544,16545,16546,16547,16548,16549,16550,16551,16552,16553,16554,16555,16556,16557,16558,16559,16560,16561,16562,16563,16564,16565,16566,16567,16568,16569,16570,16571,16572,16573,16574,16575,16576,16577,16578,16579,16580,16581,16582,16583,16584,16585,16586,16587,16588,16589,16590,16591,16592,16593,16594,16595,16596,16597,16598];


var ImageChange = [887,888,889,1192,1193,1194,1195,1196,1197,1198,1199,1200,1202,1203,1205];
var NFTImageCounter = 0;

const agent = new HttpAgent();
let principal = new Principal();

let amountPaid = 0;
var price = 0.0;
let nextAccountID = 0;
let punkCount = 0;
var seconds = 0;
var rareBunnyEnabled = false;
var isPunkHolder = false;
var adoptInProgress = false;

let totalLength = emptyTokens.length;


let punkHolder = "mbwk6-bnbhi-2zkk2-limxc-4rjmn-nfli5-rmlcf-omu3w-x6pbe-bqbys-fqe";

var isPrincipalClaimed  = false;
const whitelist = [bunnyCanisterId,punkCanisterId,financeCanisterID,storage[0],storage[1],storage[2],storage[3],storage[4],storage[5],storage[6],storage[7],storage[8],storage[9],];


const bunnyFactory = ({ IDL }) => {
        const Property = IDL.Record({ 'value' : IDL.Text, 'name' : IDL.Text });
        const MintRequest_2 = IDL.Record({
          'url' : IDL.Text,
          'dataurl' : IDL.Text,
          'accountid' : IDL.Text,
          'contentType' : IDL.Text,
          'data' : IDL.Vec(IDL.Nat8),
          'desc' : IDL.Text,
          'name' : IDL.Text,
          'properties' : IDL.Vec(Property),
        });
        const MintRequest = MintRequest_2;
        const Time = IDL.Int;
        const TokenDesc_2 = IDL.Record({
          'id' : IDL.Nat,
          'url' : IDL.Text,
          'owner' : IDL.Principal,
          'desc' : IDL.Text,
          'name' : IDL.Text,
          'properties' : IDL.Vec(Property),
          'date_of_birth' : Time,
          'storage_canister' : IDL.Text,
        });
        const RarirtyRequest_2 = IDL.Record({
          'desc' : IDL.Text,
          'name' : IDL.Text,
          'properties' : IDL.Vec(Property),
        });
        const RarirtyRequest = RarirtyRequest_2;     
        const TokenDesc = TokenDesc_2;
    return IDL.Service({
        'getPrice' : IDL.Func([], [IDL.Nat64], []),
        'getCurrentToken' : IDL.Func([], [IDL.Nat], ['query']),
        'nextAccount' : IDL.Func([], [], []),
        'claim' : IDL.Func([], [IDL.Nat], []),
        'mint' : IDL.Func([MintRequest], [IDL.Nat], []),
        'setRarity' : IDL.Func([IDL.Nat, RarirtyRequest, IDL.Nat], [TokenDesc], []),
        'my_tokens' : IDL.Func([], [IDL.Vec(IDL.Nat)], []),
        'transfer_to' : IDL.Func([IDL.Principal, IDL.Nat], [IDL.Bool], []),
        'user_tokens' : IDL.Func([IDL.Principal], [IDL.Vec(IDL.Nat)], ['query']),
    });
};


const financeFactory = ({ IDL }) => {

return IDL.Service({
  'getNormalPrice' : IDL.Func([], [IDL.Nat64], ['query']),
  'getPunkPrice' : IDL.Func([], [IDL.Nat64], ['query']),
  'isPunkHolderClaimed' : IDL.Func([IDL.Principal], [IDL.Bool], ['query']),
  'savePrincipal' : IDL.Func([IDL.Principal], [], []),
  'claimedPrincipal' : IDL.Func([], [], []),
  'isClaimed' : IDL.Func([IDL.Principal], [IDL.Bool], ['query']),
  'getAccountIndex' : IDL.Func(
    [IDL.Principal],
    [IDL.Opt(IDL.Nat)],
    ['query'],
  ),
});
};

const bunnyImageFactory = ({ IDL }) => {
  const TokenData_2 = IDL.Record({
    'id' : IDL.Nat,
    'contentType' : IDL.Text,
    'data' : IDL.Vec(IDL.Nat8),
  });
  const TokenData = TokenData_2; 
  return IDL.Service({
    'saveBunny' : IDL.Func([TokenData, IDL.Nat], [IDL.Nat], []),
  });
  };

  
const punkFactory = ({ IDL }) => {
return IDL.Service({
  'user_tokens' : IDL.Func([IDL.Principal], [IDL.Vec(IDL.Nat)], ['query']),
});
};


const icp_bunny = Actor.createActor(icp_bunny_idl, { agent, canisterId: icp_bunny_id });


(async () => {

  createButton(0.36);

})();



var el = document.getElementById('seconds-counter');


function start() {
  var tick = function(){
    // console.log("Ticket " + seconds);
    seconds += 1;
    el.innerText = "Minting Time " + seconds + " seconds.";
  };

  var timerId = setTimeout(tick, 1000);
  return timerId
};

function stop(timerId) {
  clearTimeout(timerId);
};


/*************************************** */
var mess = document.getElementById("bunnyBody");
mess.style.visibility = "visible";

document.getElementById("passwordcheck").addEventListener("click", () => {
  passwordCheck();
  
});
function passwordCheck() {
  var testV = 1;
  var pass1 = prompt('Please Enter Your Password', ' ');
  while (testV < 3) {
      if (!pass1)
          history.go(-1);
      if (pass1.toLowerCase() == "letmein") {
          alert('You Got it Right!');
          mess = document.getElementById("bunnyBody");
          mess.style.visibility = "visible";

          var pws = document.getElementById("passwordcheck");
          pws.style.visibility = "hidden";

          break;
      }
      testV += 1;
      var pass1 =
          prompt('Access Denied - Password Incorrect, Please Try Again.', 'Password');
  }
  if (pass1.toLowerCase() != "password" & testV == 3)
      history.go(-1);
  return " ";
}

/************************************************/
var stopFlag = false;
var running = false;
var timerId = 0;

function stopBar()
{
	stopFlag  = true;
  running   = false;
  //stop(timerId);
}

function startBar() {

  //timerId = start();

  stopFlag = false;
  running = true;
  if (i == 0) {
    i = 1;
    var elem = document.getElementById("myBar");
    var width = 1;
    var id = setInterval(frame, 50);
    function frame() {
      if(stopFlag)
      {
        running = false;
      	clearInterval(id);
        width = 100;
        elem.style.width = width + "%";
      }
      if (width >= 100) {
        width = 0;
        i = 0;
      } else {
        width++;
        elem.style.width = width + "%";
      }
    }
  }
}

function createButton(amount)
{
  
  document.getElementById("status").innerHTML = "";
  var adaptdiv = document.getElementById("adopt");
  if(!document.body.contains(document.getElementById('adoptid')))
  {
      let btn = document.createElement("button");
      btn.innerHTML = "Adopt it !";
      btn.id ='adoptid';
      btn.className = 'btn';
      adaptdiv.appendChild(btn);
  
      btn.onclick = function() {
        
        if(!adoptInProgress)
        {
          adopt();
          adoptInProgress = true;
        }

      }  
  }    

  // Removes an payment-checker from the document.
  try{
    var element = document.getElementById("payment-checker");
    element.parentNode.removeChild(element);
  }
  catch(e)
  {

  }


}

//bulkImage code
var version2Image = function(){
  if(isSingleImage)
  {
    return 0;
  }
  if(ImageChange.length > 0 && !isSingleImage)
  {
    var changeImageBunny = ImageChange.pop();
    document.getElementById("status").innerHTML = "Total Tokens " + totalLength + " Balance = " + ImageChange.length;
    document.getElementById("principal").value = changeImageBunny;

    change_gen(0);
    Version2ImageAdopt();
  }  
};


var bulkImage = function(){
  if(isSingleImage)
  {
    return 0;
  }
  if(emptyTokens.length > 0 && !isSingleImage)
  {
    var emptyImage = emptyTokens.pop();
    document.getElementById("status").innerHTML = "Total Tokens " + totalLength + " Balance = " + emptyTokens.length;

    document.getElementById("principal").value = emptyImage;
    adopt();
  }  
};

//latlong

var bulkLandsMint = function(){
  if(isSingleImage)
  {
    return 0;
  }
  if(emptyTokens.length > 0 && !isSingleImage)
  {
    var emptyImage = emptyTokens.pop();
    var coordinate = co_ordinates.pop();

    document.getElementById("status").innerHTML = "Total LANDs " + totalLength + " Balance = " + emptyTokens.length;

    document.getElementById("principal").value = emptyImage;
    document.getElementById("latlong").value = coordinate;

     const createLand = setTimeout(createLANDImage, 2000);
     const clickBunnyID = setTimeout(clickBunny, 3000);

     const adoptLand = setTimeout(landAdopt, 3400);

    
  }  
};


var singleImage = function()
{
    var emptyImage =   document.getElementById("start-id").value ;
    isSingleImage  = true;
    //if(emptyTokens.length > 0)
    {
      document.getElementById("principal").value = emptyImage;
      adopt();
    }
};


var setRarityTo_ = 0;

var isBulkRarity = false;

document.getElementById("setupRarity").addEventListener("click", async () => 
{
  var _startID =   document.getElementById("start-id").value ;
  var _endID   =   document.getElementById("end-id").value ;

 
  isBulkRarity = true;
 for (let i = _startID; i <= _endID; i++) {
    emptyTokens[i] = i;
  }
  setRarityParams();
  
});



//oneRarity

document.getElementById("oneRarity").addEventListener("click", async () => 
{
  setRarityBunny();
});

//Single Bunny
async function  setRarityBunny()
{
  
    var _setRarityTo =   document.getElementById("bunny-id").value ;
    if(_setRarityTo==="BunnyID")
    {
      document.getElementById("status").innerHTML = "Bunny ID not set";
      return 0;
    }

    setRarityTo_ = parseInt(_setRarityTo);
    
    startBar();

    let rareIndex = (setRarityTo_ % 10);

    /* Random Breed */
    rareIndex = Math.round(Math.random() * (9 - 0) + 0,0);

    /* Random Gender */
    var gender = "M";
    var intGender = Math.round(Math.random() * (1 - 0) + 0,0);
    if (intGender == 0)
      gender = "M";
    else
      gender = "F";

    /* Random earningCapacity */
    var earningCapacity = Math.round(Math.random() * (9 - 0) + 0,0);

    /* Random Life Span */
    var lifeSpan = Math.round(Math.random() * (9 - 0) + 0,0)
    
    /* Random Breeding Capacity */
    var breedingCapacity = Math.round(Math.random() * (9 - 0) + 0,0)
    
    trait =  {
      "Breed": Breed[rareIndex], 
      "EarningCapacity": EarningCapacity[earningCapacity], 
      "LifeSpan": LifeSpan[lifeSpan], 
      "BreedingCapacity": BreedingCapacity[breedingCapacity],
      "Gender": gender, 
      "Fertility": "true", 
      "ThreeD_Breedable": "false"
      };


    if(connectionState)
    {
      console.log("Already connected");
    }
    else
    {
      console.log("Waiting for requestConnect");
    }
    

  // Create an actor to interact with the NNS Canister
  // we pass the NNS Canister id and the interface factory

  const bunnyActor = await window.ic.plug.createActor({
    canisterId: bunnyCanisterId,
    interfaceFactory: bunnyFactory,
  });

   var rarirtyRequest = {
    name: "Bunny",
    desc: "Description",
    properties: [
      { "name": 'Breed', "value": trait.Breed },
      { "name": 'EarningCapacity', value: trait.EarningCapacity },
      { "name": 'LifeSpan', "value": trait.LifeSpan },
      { "name": 'BreedingCapacity', value: trait.BreedingCapacity },
      { "name": 'Gender', "value": trait.Gender },
      { "name": 'Fertility', "value": trait.Fertility },
      { "name": '3D_Breedable', "value": trait.ThreeD_Breedable }
    ]
  }; 

  var code = 5871;
  console.log(setRarityTo_);
  var _claimRequest = await bunnyActor.setRarity(code,rarirtyRequest,setRarityTo_);

  console.log(_claimRequest);
  
  document.getElementById("status").innerHTML = "Rarity is set for the BunnyID" + setRarityTo_;

  stopBar();

}

async function  setRarityParams()
{
  
    // Only base64 String
    startBar();
    // console.log("Minting Process");

    if(emptyTokens.length > 0)
    {
      setRarityTo_ = emptyTokens.pop();
  
      let rareIndex = (setRarityTo_ % 10);  // Over-ride later
  
      /*
      var gender = "M";
      if (setRarityTo_ % 2 == 0)
        gender = "M";
      else
        gender = "F";
      */

      /* Random Breed */
      rareIndex = Math.round(Math.random() * (9 - 0) + 0,0);

      /* Random Gender */
      var gender = "M";
      var intGender = Math.round(Math.random() * (1 - 0) + 0,0);
      if (intGender == 0)
        gender = "M";
      else
        gender = "F";        
  
      var earningCapacity = Math.round(Math.random() * (9 - 0) + 0,0);
      var lifeSpan = Math.round(Math.random() * (9 - 0) + 0,0)
      var breedingCapacity = Math.round(Math.random() * (9 - 0) + 0,0)
      
      trait =  {
        "Breed": Breed[rareIndex], 
        "EarningCapacity": EarningCapacity[earningCapacity], 
        "LifeSpan": LifeSpan[lifeSpan], 
        "BreedingCapacity": BreedingCapacity[breedingCapacity],
        "Gender": gender, 
        "Fertility": "true", 
        "ThreeD_Breedable": "false"
        };
  
    }
    else
    {
      stopBar();
      return 0;
    } 

    if(connectionState)
    {
      console.log("Already connected");
    }
    else
    {
      console.log("Waiting for requestConnect");
    }
    

  // Create an actor to interact with the NNS Canister
  // we pass the NNS Canister id and the interface factory
  // 123123

  const bunnyActor = await window.ic.plug.createActor({
    canisterId: bunnyCanisterId,
    interfaceFactory: bunnyFactory,
  });
  
   var rarirtyRequest = {
    name: "Bunny",
    desc: "Description",
    properties: [
      { "name": 'Breed', "value": trait.Breed },
      { "name": 'EarningCapacity', value: trait.EarningCapacity },
      { "name": 'LifeSpan', "value": trait.LifeSpan },
      { "name": 'BreedingCapacity', value: trait.BreedingCapacity },
      { "name": 'Gender', "value": trait.Gender },
      { "name": 'Fertility', "value": trait.Fertility },
      { "name": '3D_Breedable', "value": trait.ThreeD_Breedable }
    ]
  }; 

  var code = 5871;
  console.log(setRarityTo_);
  var _claimRequest = await bunnyActor.setRarity(code,rarirtyRequest,setRarityTo_);

  console.log(_claimRequest);
  
  document.getElementById("status").innerHTML = _claimRequest;

  stopBar();

  if(isBulkRarity)
  {
    var timerId = setTimeout(setRarityParams, 2000);
  }

}

document.getElementById("singleimage").addEventListener("click", async () => {
  isSingleImage = true;
  singleImage();
});
document.getElementById("addimage").addEventListener("click", async () => {
  isSingleImage = false;
  bulkImage();
});

document.getElementById("addVersion2").addEventListener("click", async () => {
  isSingleImage = false;
  version2Image();
});

document.getElementById("bulklandmint").addEventListener("click", async () => {
  isSingleImage = false;
  bulkLandsMint();
});


document.getElementById("bulkadopt").addEventListener("click", async () => {



  const bunnyActor = await window.ic.plug.createActor({
    canisterId: bunnyCanisterId,
    interfaceFactory: bunnyFactory,
  });
  
  
  var plugPrincipal = document.getElementById("useraccountname").value ;
  
  let userPrincipal = Principal.fromText(plugPrincipal);

  var myTokens = await bunnyActor.user_tokens(userPrincipal);
  var arrayLength = myTokens.length;
  var data = "";
  var command = "";

  document.getElementById("status").innerHTML = "Total Bunny Size " + arrayLength;

  
  for (var i = 0; i < arrayLength; i++) {

    data = document.getElementById('cleandata').value;
    command = "dfx canister --network ic call prod_icpbunny cleanPrincipal '(principal \""+ plugPrincipal +"\","+myTokens[i]+")'";
    document.getElementById('cleandata').value =  data + command;
  }


});

document.getElementById("generateAccount").addEventListener("click", async () => {

  document.getElementById('cleandata').value ="";
  const bunnyPrincpal = "vwwmp-om32r-tgzpy-3lx3m-a5qbm-5pst6-xfdoi-gtivj-trcp6-k3dch-5ae";
  var command = "";
  for (var i = 0; i < 100; i++)
  {
      var cont_principal = principalToAccountIdentifier(bunnyPrincpal,i);

      var data = document.getElementById('cleandata').value;
      command = cont_principal + "\n";
      document.getElementById('cleandata').value =  data + command;      
  }

});

const tokenIdentifier = (principal, index) => {
  const padding = Buffer("\x0Atid");
  const array = new Uint8Array([
      ...padding,
      ...Principal.fromText(principal).toUint8Array(),
      ...to32bits(index),
  ]);
  return Principal.fromUint8Array(array).toText();
};

  const waheedId = (p, s) => {
    const padding = Buffer("\x0Atid");

    console.log(Principal.fromText(p));

    const array = new Uint8Array([
        ...padding,
        ...Principal.fromText(p).toUint8Array(),
        ...to32bits(s)
    ]);

    console.log(Principal.fromUint8Array(array).toText());

    const hash = sha224(array);
    const checksum = to32bits(getCrc32(hash));
    const array2 = new Uint8Array([
        ...checksum,
        ...hash
    ]);
    return toHexString(array2);
  };


document.getElementById("generateToken").addEventListener("click", async () => {

  document.getElementById('cleandata').value ="";
  var canister = document.getElementById('canisterid').value;
  canister = "q6hjz-kyaaa-aaaah-qcama-cai";

  document.getElementById('cleandata').value ="";
  const bunnyPrincpal = "q6hjz-kyaaa-aaaah-qcama-cai";
  var command = "";
  for (var i = 0; i < 100; i++)
  {
      var cont_principal = waheedId(bunnyPrincpal,i);

      var data = document.getElementById('cleandata').value;
      command = cont_principal + "\n";
      document.getElementById('cleandata').value =  data + command;      
  }

});



/****************************************** */
async function init()
{
  const authClient = await AuthClient.create();
  if (await authClient.isAuthenticated()) {
    handleAuthenticated(authClient);
  };
};


//Account ID
async function accountID()
{
  try {
      const index = document.getElementById("account-index").value.toString();
      const bunnyPrincpal = "vwwmp-om32r-tgzpy-3lx3m-a5qbm-5pst6-xfdoi-gtivj-trcp6-k3dch-5ae";
      const cont_principal = principalToAccountIdentifier(bunnyPrincpal,index);
      document.getElementById("account-name").value = cont_principal;
      
      // // console.log(cont_principal);
    
      connectWallet();
  } catch (error) 
  {
    console.error(error);
  }
  

}

async function internet_login()
{
  const authClient = await AuthClient.create();
  if (await authClient.isAuthenticated()) {
    handleAuthenticated(authClient);
  };

  await authClient.login({
    onSuccess: async () => {
      handleAuthenticated(authClient);
    },
    identityProvider:
      process.env.DFX_NETWORK === "ic"
        ? "https://identity.ic0.app/#authorize"
        : process.env.LOCAL_II_CANISTER,
  });

  async function handleAuthenticated(authClient) {
    const identity = await authClient.getIdentity();
    // // console.log(identity.getPrincipal());
     

    const httpAgent = new HttpAgent({identity});
     
    let principal = new Principal();
    
    const bunny = Actor.createActor(icp_bunny_idl, { httpAgent, canisterId: icp_bunny_id });
    

    principal = Principal.fromBlob(identity.getPrincipal());

    // console.log("Principle Text ");
    // console.log(principal.toText());

   
    // console.log(" Identity Principal Caller")
 
    const saveSeeds = await icp_bunny.getCaller();
    // console.log(saveSeeds);

    principal = Principal.fromBlob(saveSeeds.getPrincipal());

    // console.log("Caller Principle Text ");
    // console.log(principal.toText());
  }
}

document.getElementById("mintAgain").style.display='none';

document.getElementById("mintAgain").addEventListener("click", async () => {

  location.reload();
  /*nextAccountID = await icp_bunny.nextAccount();
  document.getElementById("payment-checker").disabled = false;
  document.getElementById("claimButton").disabled = false;

  if(document.body.contains(document.getElementById('adoptid')))
  {
    var adoptBtn = document.getElementById("adoptid");
    adoptBtn.remove();
  }*/
});

document.getElementById("claimButton").addEventListener("click", async () => {

  /*
  await window?.ic?.plug?.requestConnect({
    whitelist,
    host:"https://mainnet.dfinity.network",
  });
  */    
 console.log(connectionState);

  const bunnyActor = await window.ic.plug.createActor({
    canisterId: bunnyCanisterId,
    interfaceFactory: bunnyFactory,
  });

  
  var transfer_to = document.getElementById("useraccountname").value ;

  let userPrincipal = Principal.fromText(transfer_to);


  var token_ =   document.getElementById("principal").value;

  var _token =  parseInt(token_); //6636; //8366;


  isClaimed = await bunnyActor.transfer_to(userPrincipal,_token);


});


document.getElementById("icp-bunny").addEventListener("click", async () => {
  const accountName = document.getElementById("account-name").value.toString();
  gen(0);
  
});

document.getElementById("cute-bunny").addEventListener("click", async () => {

  getMyTokens();

  document.getElementById("status").innerHTML = "Rare Bunnies still not available !";

  if(rareBunnyEnabled)
  {
    const accountName = document.getElementById("account-name").value.toString();
    gen(1);
  }
  
});




async function checkPayment()
{
    connectWallet();
    const cont_principal = document.getElementById("account-name").value;
    return checkAccountBalance(cont_principal);
}

const to32bits = num => {
  let b = new ArrayBuffer(4);
  new DataView(b).setUint32(0, num);
  return Array.from(new Uint8Array(b));
}


const principalToAccountIdentifier = (p, s) => {
  const padding = Buffer("\x0Aaccount-id");
  const array = new Uint8Array([
      ...padding,
      ...Principal.fromText(p).toBlob(),
      ...getSubAccountArray(s)
  ]);


  // console.log("Array Start");
  // console.log(array[array.length-1]);
  // console.log(array[array.length-2]);
  // console.log("Array End");


  const hash = sha224(array);
  const checksum = to32bits(getCrc32(hash));
  const array2 = new Uint8Array([
      ...checksum,
      ...hash
  ]);
  return toHexString(array2);
};

const toHexString = (byteArray)  =>{
  return Array.from(byteArray, function(byte) {
    return ('0' + (byte & 0xFF).toString(16)).slice(-2);
  }).join('')
}

const getSubAccountArray = (s) => {
  if (Array.isArray(s)){
    return s.concat(Array(32-s.length).fill(0));
  } else {
    //32 bit number only
    return Array(28).fill(0).concat(to32bits(s ? s : 0))
  }
};


function checkAccountBalance(account)
{
  //account = document.getElementById("contribution-principal").value;
  // console.log("Checking balance");

  var url = "https://rosetta-api.internetcomputer.org/account/balance";

  var xhr = new XMLHttpRequest();
  xhr.open("POST", url);
  
  xhr.setRequestHeader("Accept", "application/json");
  xhr.setRequestHeader("Content-Type", "application/json");
  
  xhr.onreadystatechange = function () {
     if (xhr.readyState === 4) {
        // console.log(xhr.status);
        // console.log(xhr.responseText);
        var obj = JSON.parse(xhr.responseText);
  
        var balance = obj.balances[0].value/100000000;

      // console.log(balance);
      amountPaid = balance;
      // Printing all the values from the resulting object
       var symbol = obj.balances[0].currency.symbol;
  
      createButton(balance);

      return balance;
  
     }};
  
  var data = `{
     "network_identifier":{
        "blockchain":"Internet Computer",
        "network":"00000000000000020101"
     },
     "account_identifier":{
        "address":"${account}"
     }
  }`;

  // console.log(data);
  var obj = JSON.parse(data);
  obj.account_identifier.address = account;
  // console.log(obj)
 
  xhr.send(data);  
}



function getAccountBalance(account)
{
  var url = "https://rosetta-api.internetcomputer.org/account/balance";

  var xhr = new XMLHttpRequest();
  xhr.open("POST", url);
  
  xhr.setRequestHeader("Accept", "application/json");
  xhr.setRequestHeader("Content-Type", "application/json");
  
  xhr.onreadystatechange = function () {
     if (xhr.readyState === 4) {
        // console.log(xhr.status);
        // console.log(xhr.responseText);
        var obj = JSON.parse(xhr.responseText);
  
        var balance = obj.balances[0].value/100000000;
      // console.log(balance);
      // Printing all the values from the resulting object
       var symbol = obj.balances[0].currency.symbol;
  
      document.getElementById("greeting").innerText = account + "\n" + balance +" "+ symbol;
  
     }};generateToniqTokenID
  var data = `{
     "network_identifier":{
        "blockchain":"Internet Computer",
        "network":"00000000000000020101"
     },
     "account_identifier":{
        "address":"${account}"
     }
  }`;

  // console.log(data);
  var obj = JSON.parse(data);
  obj.account_identifier.address = account;
  // console.log(obj)
 
  xhr.send(data);  
}

function getTransactions(account)
{
  var url = "https://rosetta-api.internetcomputer.org/search/transactions";

  var xhr = new XMLHttpRequest();
  xhr.open("POST", url);
  
  xhr.setRequestHeader("Accept", "application/json");
  xhr.setRequestHeader("Content-Type", "application/json");
  
  xhr.onreadystatechange = function () {
     if (xhr.readyState === 4) {
        // console.log(xhr.status);
        // console.log(xhr.responseText);
        var obj = JSON.parse(xhr.responseText);

    // Find out account name exist in the list of transactions
    let text = "";
    for (let i = 0; i < obj.transactions.length; i++) 
    { 
      text = text + "Sender : " + obj.transactions[i].transaction.operations[0].account.address + "\n";
      text = text + "Receiver : " + obj.transactions[i].transaction.operations[1].account.address + "\n";
      text = text + "Amount Sent :" + obj.transactions[i].transaction.operations[0].amount.value/100000000 + "\n";
      text = text + "Amount Received :" + (obj.transactions[i].transaction.operations[1].amount.value/100000000) + "\n";
      text = text + "------------------------------------------------------------------------------------ \n";
    }

    document.getElementById("greeting").innerText = text; 

     }};
  
  var data = `{
     "network_identifier":{
        "blockchain":"Internet Computer",
        "network":"00000000000000020101"
     },
     "account_identifier":{
        "address":"${account}"
     }
  }`;

  // console.log(data);
  var obj = JSON.parse(data);
  obj.account_identifier.address = account;

  // console.log(obj)
  xhr.send(data);  
}

function generateMoonCatImage(catId, size){
  size = size || 10;
  var data = mooncatparser(catId);
  var colors = bunnycolors(catId);
  // console.log("Color = " + colors);

  var canvas = document.createElement("canvas");
  canvas.width = size * data.length;
  canvas.height = size * data[1].length;
  var ctx = canvas.getContext("2d");

  //https://rarity.studio/cats.html

  for(var i = 0; i < data.length; i++){
    for(var j = 0; j < data[i].length; j++){
      var color = data[i][j];
      if(color){
        ctx.fillStyle = color;
        ctx.fillRect(i * size, j * size, size, size);
      }
    }
  }
  return canvas.toDataURL();
}



function decimalToHexString(number)
{
  if (number < 0)
  {
    number = 0xFFFFFFFF + number + 1;
  }

  return number.toString(16).toUpperCase();
}
function random(max) {
    return Math.floor(Math.random() * max) + 1;
}
function gen(genesis)
{
    const random_hex_color_code = () => {
      let n = (Math.random() * 0xaaaaa * 12345678).toString(16);
      
      var rand = random(255);      
      // console.log("N value = "+ n + " Random Body ="+ rand);

      if(genesis)
      {
        return 'df' + decimalToHexString(rand) + n.slice(0, 8);
      }
     else
     {
        return 'df00' + decimalToHexString(rand) + n.slice(0, 6);
     }
    };

    document.getElementById("bunnyid").value = random_hex_color_code(); 
    
    var span = document.getElementById("bunny_meta_data");
    span.textContent = document.getElementById("bunnyid").value;
    
    var catid = document.getElementById("bunnyid").value;
    let img = generateMoonCatImage(catid,100);
    document.getElementById("bunny").src= img;	
}

function genBunny(genesis)
{
    const random_hex_color_code = () => {
      let n = (Math.random() * 0xaaaaa * 12345678).toString(16);
      //var rand = random(255);

      var rand = document.getElementById("bunny-index").value.toString();

      if(genesis)
      {
        return 'df' + decimalToHexString(rand) + n.slice(0, 8);
      }
     else
     {
        return 'df00' + decimalToHexString(rand) + n.slice(0, 6);
     }
    };

    document.getElementById("bunnyid").value = random_hex_color_code(); 
    
}


function tableCreate() {
  var body = document.getElementsByTagName('body')[0];
  var tbl = document.getElementById('nft');
  tbl.style.width = '100%';
  tbl.setAttribute('border', '0');
  var tbdy = document.createElement('tbody');
  var genesis = true;
  for (var i = 0; i < 5; i++) {
    var tr = document.createElement('tr');
    for (var j = 0; j < 5; j++) {
        if(genesis)
          genesis = false;
        else
          genesis = false;
        genBunny(genesis);
        var td = document.createElement('td');

        var span = document.createElement("span");
        var image = document.createElement("img");

        var bunnyid = document.getElementById("bunnyid").value;
        var bunny   = document.createTextNode(bunnyid + ' ');
        // console.log(bunnyid);

        let img = generateMoonCatImage(bunnyid,8);
        image.src= img;	
        td.appendChild(bunny);
        span.appendChild(image);
        td.appendChild(span)
        tr.appendChild(td)
    }
    tbdy.appendChild(tr);
  }
  tbl.appendChild(tbdy);
  body.appendChild(tbl)
}


/*
var genesis = false;
for (let i = 0; i < 10; i++) {

  gen(genesis);
  if(genesis)
    genesis = false;
  else
    genesis = true;
}
*/

/*
function loadXHR(url) {

  return new Promise(function(resolve, reject) {
      try {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", url);
          xhr.responseType = "blob";
          xhr.onerror = function() {reject("Network error.")};
          xhr.onload = function() {
              if (xhr.status === 200) {resolve(xhr.response)}
              else {reject("Loading error:" + xhr.statusText)}
          };
          xhr.send();
      }
      catch(err) {reject(err.message)}
  });
  }
  
  loadXHR("https://e3izy-jiaaa-aaaah-qacbq-cai.raw.ic0.app/?tokenid=ali4h-rikor-uwiaa-aaaaa-b4aaq-maqca-aaade-a").then(function(blob) {
      // console.log(blob);
   
      var arrayBuffer;
      var fileReader = new FileReader();
      fileReader.onload = function(event) {
      arrayBuffer = event.target.result;
      // console.log(arrayBuffer);
  
      const songDataArray = Array.from(new Uint8Array(arrayBuffer));
      // console.log(songDataArray);
  
      let NewArrayBuffer = new Uint8Array(songDataArray);
  
      // console.log(NewArrayBuffer);
  
      const bufferBlob = new Blob([NewArrayBuffer], {
      type: "image/svg+xml",});   
  
      const bufferBlob2 = new Blob([NewArrayBuffer], {
      type: "octet/stream",});   // Not working
  
      
  
      // console.log(bufferBlob);
  
      var bufferImage = URL.createObjectURL(bufferBlob);
      const bufferImg = document.createElement('img');
      bufferImg.width = 200;
      bufferImg.height = 200;
      bufferImg.src = bufferImage;
  
      document.body.appendChild(bufferImg);
  
      };
      fileReader.readAsArrayBuffer(blob);
  
  });

*/

/*
Here we have bunny generated image. Once we have the image in the canvas
We can use that image generate blob

Done 1.Bunny is generated with moontCatParser.js 
Done 2.Bunny is in Canvas now
Done 3.Loaded in image tag User can see the Bunny now.
4.When selected for Adoption, it will be converted to Numbers NAT array

User will make the payment. Once paid we need to send the paid Account Identifier to the canister
When the canister receives and stores to verify while minting the NFT

5.Send to canister NAT data/Blob, Token Identifier, Token ID,AccountIdentifier
6.Canister verifiers whether amount is received from the AccountIdentifier


We should have hashmap to store
1.AccountID and Contribution Address
When ever an Account Id is entered same contribution address should be displayed


Then the NFT is associated with that Account Identifier

When downloading canister will be called as

http://canister-id.localhost:80000/?tokenid=ali4h-rikor-uwiaa-aaaaa-b4aaq-maqca-aaade-a

1.Parse the Token ID 
2.Get the Token index
3.Return the Image
*/
/**************************************************************/

function dataURLToBlob(dataURL) {
  var BASE64_MARKER = ';base64,';

  if (dataURL.indexOf(BASE64_MARKER) == -1) {
      var parts = dataURL.split(',');
      var contentType = parts[0].split(':')[1];
      var raw = decodeURIComponent(parts[1]);

      return new Blob([raw], {type: contentType});
  }

  var parts = dataURL.split(BASE64_MARKER);
  var contentType = parts[0].split(':')[1];
  var raw = window.atob(parts[1]);
  var rawLength = raw.length;

  var uInt8Array = new Uint8Array(rawLength);

  for (var i = 0; i < rawLength; ++i) {
      uInt8Array[i] = raw.charCodeAt(i);
  }

  return new Blob([uInt8Array], {type: contentType});
}
/**************************************************************/
function blobToImage(blob)
{
  // Image to Blob

  var arrayBuffer;
  var fileReader = new FileReader();
  fileReader.onload = function(event) {
  arrayBuffer = event.target.result;

  // console.log("Inside...");
  // console.log(arrayBuffer);

  const songDataArray = Array.from(new Uint8Array(arrayBuffer));
  // console.log(songDataArray);
  //const result1 = await mugatunes.putSongChunk(song,id,chunk);

  //////////////// Now convert back to image 
  //let rawDataArray = JSON.parse( "[" + nestedBytes + "]"); // Important step
  let NewArrayBuffer = new Uint8Array(songDataArray);

  // console.log(NewArrayBuffer);

  const bufferBlob = new Blob([NewArrayBuffer], {
  type: "image/png",});   
 

  // console.log(bufferBlob);

  var bufferImage = URL.createObjectURL(bufferBlob);
  const bufferImg = document.createElement('img');
  bufferImg.width = 200;
  bufferImg.height = 200;
  bufferImg.src = bufferImage;

  document.body.appendChild(bufferImg);

  };
  fileReader.readAsArrayBuffer(blob);    
}
/**************************************************************/
var tokenId = 1;
/**************************************************************/

async function make_request() {

  //var trait =  {"Background": "Grey", "Body": "White", "Top": "Top", "Head": "head", "Eyes": "nose", "Nose": "White", "Mouth": "Holy Water", "tokenId": tokenId}
  let bunny = document.getElementById("bunny").src;

  tokenId++;
  const bunnyBlob = dataURLToBlob(bunny);
  // console.log(bunnyBlob);

  var bufferPromise = bunnyBlob.arrayBuffer();

  bunnyBlob.arrayBuffer().then(buffer => {});

  var buffer = await bunnyBlob.arrayBuffer();
  const songDataArray = Array.from(new Uint8Array(buffer));

  // console.log(songDataArray);

  var account_name =  document.getElementById("account-name").value;
  const bunnyID = document.getElementById("bunnyid").value.toString();


  var mintRequest = {
    name: "ICPBunny #" + (trait.tokenId + 1),
    url: "/Token/" + (trait.tokenId + 1),
    dataurl:"/Token/" + (trait.tokenId + 1),
    contentType: "image/png",
    accountid: account_name,
    data: songDataArray, //data,
    desc: bunnyID,
    properties: [
      { name: 'Breed', value: trait.Breed },
      { name: 'EarningCapacity', value: trait.EarningCapacity },
      { name: 'LifeSpan', value: trait.LifeSpan },
      { name: 'BreedingCapacity', value: trait.BreedingCapacity },
      { name: 'Gender', value: trait.Gender },
      { name: 'Fertility', value: trait.Fertility },
      { name: '3D_Breedable', value: trait.ThreeD_Breedable },
    ]
  };
  return mintRequest;
}


async function claimRequest() {

  let bunny = document.getElementById("bunny").src;

  const bunnyBlob = dataURLToBlob(bunny);
  // console.log(bunnyBlob);

  var bufferPromise = bunnyBlob.arrayBuffer();

  bunnyBlob.arrayBuffer().then(buffer => {});

  var buffer = await bunnyBlob.arrayBuffer();
  const bunnyDataArray = Array.from(new Uint8Array(buffer));

  // console.log(bunnyDataArray);

  var claimRequest_ = {
    'id' : 1,
     contentType: "image/png",
     data: bunnyDataArray, 
  };
 
  return claimRequest_;
}
/*************************************************************/
function generateToniqTokenID(index)
{ 

  return new Promise((resolve, reject) => {
    setTimeout(function() {

      let principal = "e3izy-jiaaa-aaaah-qacbq-cai";
      index         = 100;
    
      const padding = Buffer("\x0Atid");
    
      console.log(Principal.fromText(principal));

      console.log(Principal.fromText(principal).toUint8Array());

      const array = new Uint8Array([
        ...padding,
        ...Principal.fromText(principal).toUint8Array(),
        ...ToUint32(index),
      ]);
    
      let bunnyAddress = Principal.fromUint8Array(array).toText();
      console.log(bunnyAddress);

      didSucceed ? resolve(bunnyAddress) : reject('Error');
    }, 10);
  })

  /*
  // Generate UNIQU ID for Toniq Labs
  // console.log("Generate UNIQU ID for Toniq Labs");
  let principal = "e3izy-jiaaa-aaaah-qacbq-cai";
  index         = 100;

  const padding = Buffer("\x0Atid");


  const array = new Uint8Array([
    ...padding,
    ...Principal.fromText(principal).toUint8Array(),
    ...ToUint32(index),
  ]);

  let bunnyAddress = Principal.fromUint8Array(array).toText();
  // console.log("Bunny Toniq Address = ");
  // console.log(bunnyAddress);
  return bunnyAddress;
  */
}
/******************************************************/

function  connectWallet()
{
    var principalId = document.getElementById("principal").value;

    // Always first account
    const cont_principal = principalToAccountIdentifier(principalId,0); 

    // console.log("principalId = " + cont_principal);
    document.getElementById("useraccountname").value = cont_principal;
   
}



async function  generateContributionAccount()
{

    
    await window?.ic?.plug?.requestConnect({
      whitelist,
      host:"https://mainnet.dfinity.network",
    });
  
  // Create an actor to interact with the NNS Canister
  // we pass the NNS Canister id and the interface factory
  const financeActor = await window.ic.plug.createActor({
    canisterId: financeCanisterID,
    interfaceFactory: financeFactory,
  });

    //let account_index = await bunnyActor.nextAccount();
    // console.log("Next Account " + nextAccountID);

    let principal = document.getElementById("principal").value;
    let userPrincipal = Principal.fromText(principal);

    nextAccountID = await financeActor.getAccountIndex(userPrincipal);

    // console.log(nextAccountID);

    document.getElementById("account-index").value = nextAccountID;
    accountID();

    /*
    let principal = document.getElementById("principal").value;
    let contributionAccount = await financeActor.getAccount(principal);
    // console.log(principal  + " principal " + contributionAccount);

    document.getElementById("account-name").value = contributionAccount;
    */

    //Check is claimed
    //Get PunkPrice
    //Get Normal Price


    document.getElementById("mint-fee").innerHTML = "Minting Fee :"+ price +" ICP - Send to below Account ID from PlugWallet";
}

(async () => {
  const result = await window?.ic?.plug?.requestConnect({
    whitelist,
    host:"https://mainnet.dfinity.network",
  }); 
  const connectionState = result ? true : false;
  console.log(`The Connection Result ${result}!`);
  console.log(`The Connection was ${connectionState}!`);
})();


async function  getMyTokens()
{
   
  // Create an actor to interact with the NNS Canister
  // we pass the NNS Canister id and the interface factory
  const bunnyActor = await window.ic.plug.createActor({
    canisterId: bunnyCanisterId,
    interfaceFactory: bunnyFactory,
  });

    const principalId = await window.ic.plug.agent.getPrincipal();

    console.log(principalId);
    
    //let userPrincipal = Principal.fromText(plugPrincipal);

    let myTokens  = await bunnyActor.user_tokens(principalId);   


    var arrayLength = myTokens.length;
    // console.log("Comparision happens now");

    if(arrayLength == 0)
    {
      // console.log("Array length is Zero");

      var body = document.getElementById('bunnynft');
      var tbl = document.getElementById('nft');
      tbl.style.width = '100%';
      tbl.setAttribute('border', '0');
      var tbdy = document.createElement('tbody');
      var genesis = true;


      try{
        document.getElementById("count-1").remove();
      }
      catch(e){}

      var tr = document.createElement('tr');
      tr.setAttribute("id", "count-1");
      var td = document.createElement('td');
      var a = document.createElement('a');
      var linkText = document.createTextNode("You have "+ arrayLength + " ICPBunny");
      a.appendChild(linkText);
      a.title = "ICPBunny " + arrayLength;
      a.href = "#";       
      td.appendChild(a)
      tr.appendChild(td)       
      tbdy.appendChild(tr);
      tbl.appendChild(tbdy);
      body.appendChild(tbl)        
    }

    for (var i = 0; i < arrayLength; i++) {
      

      {
        var body = document.getElementById('bunnynft');
        var tbl = document.getElementById('nft');
        tbl.style.width = '100%';
        tbl.setAttribute('border', '0');
        var tbdy = document.createElement('tbody');
        var genesis = true;
        for (var i = 0; i < arrayLength; i++) {

          try{
            document.getElementById("b-"+i).remove();
          }
          catch(e){}

          var tr = document.createElement('tr');
          tr.setAttribute("id", "b-"+i);
          
          var td = document.createElement('td');
  
          var a = document.createElement('a');
          var linkText = document.createTextNode("Bunny " + myTokens[i]);
          a.appendChild(linkText);
          a.title = "Bunny " + myTokens[i];

          let canister = (myTokens[i]%10n);
          // console.log(storage[canister]);

          a.href = "https://"+ storage[canister] +".raw.ic0.app/Token/"+ (myTokens[i]);
          a.target = myTokens[i];

          var img = document.createElement('img');
          img.src = "https://"+ storage[canister] +".raw.ic0.app/Token/"+ (myTokens[i]);
          img.height = 50;
          img.width = 50;
          //document.getElementById('body').appendChild(img)          
          var t = document.createTextNode("ICPBunny# " + tokenID);
          td.appendChild(t);        
  
          td.appendChild(img)
          tr.appendChild(td)
         
          tbdy.appendChild(tr);
        }
        tbl.appendChild(tbdy);
        body.appendChild(tbl)
      }
    }

    // console.log("My Tokens Size" + arrayLength);
    // console.log(myTokens);
}

/*********************************************************/
async function  landAdopt()
{
    //// console.log("Bunny Toniq Address = ");
    //generateToniqTokenID(100);

    // Only base64 String
    startBar();
    // console.log("Minting Process");

    if(connectionState)
    {
      console.log("Already connected");

      /*
      const result = await window?.ic?.plug?.requestConnect({
        whitelist,
        host:"https://mainnet.dfinity.network",
      }); 
      const secondState = result ? true : false;
      console.log(`The Connection was ${connectionState}!`);
      */
    }
    else
    {
      console.log("Waiting for requestConnect");
    }
    


 
  // Create an actor to interact with the NNS Canister
  // we pass the NNS Canister id and the interface factory

  const bunnyActor = await window.ic.plug.createActor({
    canisterId: bunnyCanisterId,
    interfaceFactory: bunnyFactory,
  });




  var _claimRequest = await claimRequest();

  console.log(_claimRequest);
  
  var isClaimed = 0;
  var isMinted = 0;


  try {
   

    let tokenId = document.getElementById("principal").value;

    if(tokenId.length < 0)
    {
      document.getElementById("status").innerHTML = "You need to enter the tokenid";

      return 0;
    }


    isClaimed =  parseInt(tokenId); //6636; //8366;

    console.log("Current Token " + isClaimed);


    let canisterIndex       = (isClaimed % 10);
    let storageCanister     = storage[canisterIndex];

    console.log(storageCanister);

    console.log(connectionState);
    console.log(isClaimed);
    console.log(_claimRequest);

    //if(connectionState)
    {
      const bunnyStorage = await window.ic.plug.createActor({
        canisterId: storageCanister,
        interfaceFactory: bunnyImageFactory,
      });

      console.log(bunnyStorage);

      isMinted = await bunnyStorage.saveBunny(_claimRequest,isClaimed);
    }

    console.log(isMinted);


    if(isMinted > 0)
    {
      document.getElementById("mintAgain").style.display='block';
      stopBar();
      if(isMinted == 10001)
      {
        document.getElementById("status").innerHTML = "Oh, ICP you sent is little lesser send the remaining amount !";
      }      
      else{
        let bunnyLink = "<a target='_' href='https://"+storageCanister+".raw.ic0.app/Token/"+isMinted + "'>Your Bunny</a> lives here !";
        
        document.getElementById("status").innerHTML = "Congratulations ! " + bunnyLink;
      }
      adoptInProgress = false;
    }
    else if(isMinted == 0)
    {
      stopBar();
      document.getElementById("status").innerHTML = "Oh, No the Bunny escaped to the moon !";
      adoptInProgress = false;
    }

    stopBar();
    gen(0);
 
    var timerId = setTimeout(bulkLandsMint, 2000);

  }
  catch(err) {
    stopBar();
    console.log(err);
    document.getElementById("status").innerHTML = "Network Error.... " + err ;
    adoptInProgress = false;
    gen(0);

  }

}

/**********************************************************/
async function  Version2ImageAdopt()
{
    // Only base64 String
    startBar();

    if(connectionState)
    {
      console.log("Already connected");
    }
    else
    {
      console.log("Waiting for requestConnect");
    }  
 
  // Create an actor to interact with the NNS Canister
  // we pass the NNS Canister id and the interface factory

  const bunnyActor = await window.ic.plug.createActor({
    canisterId: bunnyCanisterId,
    interfaceFactory: bunnyFactory,
  });

  var _claimRequest = await claimRequest();

  console.log(_claimRequest);
  
  var isClaimed = 0;
  var isMinted = 0;


  try {
   

    let tokenId = document.getElementById("principal").value;

    if(tokenId.length < 0)
    {
      document.getElementById("status").innerHTML = "You need to enter the tokenid";

      return 0;
    }


    isClaimed =  parseInt(tokenId); //6636; //8366;

    console.log("Current Token " + isClaimed);


    let canisterIndex       = (isClaimed % 10);
    let storageCanister     = storage[canisterIndex];

    console.log(storageCanister);

    console.log(connectionState);
    console.log(isClaimed);
    console.log(_claimRequest);

    //if(connectionState)
    {
      const bunnyStorage = await window.ic.plug.createActor({
        canisterId: storageCanister,
        interfaceFactory: bunnyImageFactory,
      });

      console.log(bunnyStorage);

      isMinted = await bunnyStorage.saveBunny(_claimRequest,isClaimed);
    }

    console.log(isMinted);


    if(isMinted > 0)
    {
      document.getElementById("mintAgain").style.display='block';
      stopBar();
      if(isMinted == 10001)
      {
        document.getElementById("status").innerHTML = "Oh, ICP you sent is little lesser send the remaining amount !";
      }      
      else{
        let bunnyLink = "<a target='_' href='https://"+storageCanister+".raw.ic0.app/Token/"+isMinted + "'>Your Bunny</a> lives here !";
        
        document.getElementById("status").innerHTML = "Congratulations ! " + bunnyLink;
      }
      adoptInProgress = false;
    }
    else if(isMinted == 0)
    {
      stopBar();
      document.getElementById("status").innerHTML = "Oh, No the Bunny escaped to the moon !";
      adoptInProgress = false;
    }

    stopBar();
    change_gen(0);
 
    var timerId = setTimeout(version2Image, 2000);

  }
  catch(err) {
    stopBar();
    console.log(err);
    document.getElementById("status").innerHTML = "Network Error.... " + err ;
    adoptInProgress = false;
    change_gen(0);

  }
}

function change_gen(genesis)
{
    NFTImageCounter = NFTImageCounter + 1;
    let img = "Normal/" + NFTImageCounter + ".png";
    document.getElementById("bunny").src= img;	
}
/*********************************************************/
async function  adopt()
{
    //// console.log("Bunny Toniq Address = ");
    //generateToniqTokenID(100);

    // Only base64 String
    startBar();
    // console.log("Minting Process");

    if(connectionState)
    {
      console.log("Already connected");

      /*
      const result = await window?.ic?.plug?.requestConnect({
        whitelist,
        host:"https://mainnet.dfinity.network",
      }); 
      const secondState = result ? true : false;
      console.log(`The Connection was ${connectionState}!`);
      */
    }
    else
    {
      console.log("Waiting for requestConnect");
    }
    


 
  // Create an actor to interact with the NNS Canister
  // we pass the NNS Canister id and the interface factory

  const bunnyActor = await window.ic.plug.createActor({
    canisterId: bunnyCanisterId,
    interfaceFactory: bunnyFactory,
  });




  var _claimRequest = await claimRequest();

  console.log(_claimRequest);
  
  var isClaimed = 0;
  var isMinted = 0;


  try {
   

    let tokenId = document.getElementById("principal").value;

    if(tokenId.length < 0)
    {
      document.getElementById("status").innerHTML = "You need to enter the tokenid";

      return 0;
    }


    isClaimed =  parseInt(tokenId); //6636; //8366;

    console.log("Current Token " + isClaimed);


    let canisterIndex       = (isClaimed % 10);
    let storageCanister     = storage[canisterIndex];

    console.log(storageCanister);

    console.log(connectionState);
    console.log(isClaimed);
    console.log(_claimRequest);

    //if(connectionState)
    {
      const bunnyStorage = await window.ic.plug.createActor({
        canisterId: storageCanister,
        interfaceFactory: bunnyImageFactory,
      });

      console.log(bunnyStorage);

      isMinted = await bunnyStorage.saveBunny(_claimRequest,isClaimed);
    }

    console.log(isMinted);


    if(isMinted > 0)
    {
      document.getElementById("mintAgain").style.display='block';
      stopBar();
      if(isMinted == 10001)
      {
        document.getElementById("status").innerHTML = "Oh, ICP you sent is little lesser send the remaining amount !";
      }      
      else{
        let bunnyLink = "<a target='_' href='https://"+storageCanister+".raw.ic0.app/Token/"+isMinted + "'>Your Bunny</a> lives here !";
        
        document.getElementById("status").innerHTML = "Congratulations ! " + bunnyLink;
      }
      adoptInProgress = false;
    }
    else if(isMinted == 0)
    {
      stopBar();
      document.getElementById("status").innerHTML = "Oh, No the Bunny escaped to the moon !";
      adoptInProgress = false;
    }

    stopBar();
    gen(0);
 
    var timerId = setTimeout(bulkImage, 2000);

  }
  catch(err) {
    stopBar();
    console.log(err);
    document.getElementById("status").innerHTML = "Network Error.... " + err ;
    adoptInProgress = false;
    gen(0);

  }

}

/****************************************/

var span = document.getElementById("bunny_meta_data");
span.textContent = "df000190416f";

//let img = generateMoonCatImage("df000190416f",100);
//document.getElementById("bunny").src= img;
document.getElementById("bunnyAvailable").innerText = "-----------";

//tableCreate();
gen(0); // First Image 

/****************************/



var i = 0;


function countDown()
{
  // Set the date we're counting down to
  var countDownDate = new Date("Sep 24, 2021 06:00:00").getTime();

  // Update the count down every 1 second
  var x = setInterval(function() {

    // Get today's date and time
    var now = new Date().getTime();
      
    // Find the distance between now and the count down date
    var distance = countDownDate - now;
      
    // Time calculations for days, hours, minutes and seconds
    var days = Math.floor(distance / (1000 * 60 * 60 * 24));
    var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
    var seconds = Math.floor((distance % (1000 * 60)) / 1000);
      
    // Output the result in an element with id="demo"
    document.getElementById("countdown").innerHTML = days + "d " + hours + "h "
    + minutes + "m " + seconds + "s ";
      
    // If the count down is over, write some text 
    if (distance < 0) {
      clearInterval(x);
      document.getElementById("countdown").innerHTML = "Mint Now !";
    }
  }, 1000); 

}


function createLANDImage()
{
  var canvas = document.getElementById("bunnyisland");
  var context = canvas.getContext("2d");
  var imageObj = new Image(500,500);
  imageObj.onload = function(){
      context.drawImage(imageObj, 0, 0,500,500);
      context.font = "bold 25px Bebas Neue";
      var latitudelongitude= document.getElementById("latlong").value;  
      //text = latitudelongitude;   
      context.fillStyle = '#d55aa1';
   
      var pos = latitudelongitude.length*10;
      pos = pos+100;
      console.log(pos);

      if(pos > 100) pos = 100;

     
      context.fillText(latitudelongitude, 165, 485);

      latitudelongitude = document.getElementById("latlong").value;  
      context.font = "14pt poppins";
      latitudelongitude = "icplatlong.com/" + latitudelongitude;   
      context.fillStyle = 'black';

      //context.fillText(latitudelongitude, 400, 350);

  };
  imageObj.src = "area-1.png";   
}

document.getElementById("showlatlong").addEventListener("click", () => {

  createLANDImage();

});   


function clickBunny()
{
  var canvas = document.getElementById("bunnyisland");
  let img = canvas.toDataURL();
  console.log(img);
  document.getElementById("bunny").src= img;	  
}

function showBunny()
{

  const storage_array = [];
  storage_array[0] = "efqhu-yqaaa-aaaaf-qaeda-cai";
  storage_array[1] = "ecrba-viaaa-aaaaf-qaedq-cai";
  storage_array[2] = "fp7fo-2aaaa-aaaaf-qaeea-cai";
  storage_array[3] = "fi6d2-xyaaa-aaaaf-qaeeq-cai";
  storage_array[4] = "fb5ig-bqaaa-aaaaf-qaefa-cai";
  
  storage_array[5] = "fg4os-miaaa-aaaaf-qaefq-cai";
  storage_array[6] = "ft377-naaaa-aaaaf-qaega-cai";
  storage_array[7] = "fu2zl-ayaaa-aaaaf-qaegq-cai";
  storage_array[8] = "f5zsx-wqaaa-aaaaf-qaeha-cai";
  storage_array[9] = "f2yud-3iaaa-aaaaf-qaehq-cai";

  var bunnyId = document.getElementById("showbunny").value;
 
  const link = document.getElementById('showLink');
  const canisterImage = document.getElementById('canisterImage');

  let canisterIndex = parseInt(bunnyId) % 10;
  let storageCanister = storage_array[canisterIndex];

  // ✅ Change (replace) the text of the link
  link.textContent = "Canister :" + storageCanister;
  link.href = "https://" + storageCanister + ".raw.ic0.app/Token/" + bunnyId;
  canisterImage.src = "https://" + storageCanister + ".raw.ic0.app/Token/" + bunnyId;


  
 
}


document.getElementById("bunny").addEventListener("click",  () => {
  clickBunny();
});  


document.getElementById("showimage").addEventListener("click",  () => {
  showBunny();
});  
//countDown();